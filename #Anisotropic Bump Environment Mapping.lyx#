#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{listings}
\usepackage{color}

\definecolor{dkgreen}{rgb}{0,0.4,0}
\definecolor{dkblue}{rgb}{0,0.2,0.5}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{frame=tb,
  language=C++,
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  basicstyle={\small\ttfamily},
  numbers=none,
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{dkblue},
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  breaklines=true,
  breakatwhitespace=true,
  tabsize=3
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Bumped Environment Mapping for Anisotropic Shaders
\end_layout

\begin_layout Author
Federico Marcolongo, 940085
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/withBoth.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Abstract
Anisotropic shaders need information about the whole tangent space orientation
 to render illumination models, as opposed to their isotropic counterpart,
 which only needs information concerning the normal direction to the rendered
 surface.
 This implies new challenges to address in the implementation of a real-time
 application, as well as many possibilities to render effects isotropic
 shaders couldn't describe.
 Keeping in mind the requirements a real-time rendering process needs to
 run smoothly, I try to make the best use of the aforementioned possibilities
 while maintaining accetpable performance.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
About this document
\end_layout

\begin_layout Standard
Implementing anisotropic illumination models with support for both environment
 and bump mapping required me to span many different topics on top of the
 OpenGL implementation itself.
 As a consequence, to keep the description of the project I implemented
 as concise as possible, I had to make the choice of glossing over most
 topics for which an outside reference is available.
 In those cases, a quick description is provided to explain how that particular
 aspect intervenes in the project and then a reference is specified for
 further reading.
 This let me focus more on the explanation of topics I had to come up with
 to make the project work.
 Having no other reference for such topics, I wanted to make sure that the
 explanation of mathematical models and implementation had all the space
 it required.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
To sum up the content of this document for better understanding its structure,
 here is a quick overview of its parts:
\end_layout

\begin_layout Standard
Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Anisotropic Models"
plural "false"
caps "false"
noprefix "false"

\end_inset

 focuses on anisotropic illumination in general and a few relevant models,
 describing their main purpose and the distribution function they center
 on.
 Further information can be found in the original papers
\begin_inset Foot
status open

\begin_layout Plain Layout
They can be found in the bibliography
\end_layout

\end_inset

, while more detail is given only where it matters for other parts of the
 project.
\end_layout

\begin_layout Standard
Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Bump-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

 describes bump- and displacement-mapping, going faster on normal- and parallax
 occlusion-mapping, while leaving more space to quaternion- and tangent-space-ro
tation-mapping, where a full explanation of the underlying mathematical
 model and of the choices made to implement them is needed.
 This section is fairly mathematical due to its relation to the geometry
 of surfaces.
\end_layout

\begin_layout Standard
Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Environment-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

 addresses the issue of implementing environment mapping when working with
 anisotropic models.
 It focuses most on the implementation choices I had to make to adapt the
 isotropic method it is based on, for which it provides references to allow
 the reader to have a more complete picture of the method.
 This section covers topics spanning from numerical integration to rendering
 optimizations and is therefore more technical than the previous.
\end_layout

\begin_layout Standard
Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Implementation-Details"
plural "false"
caps "false"
noprefix "false"

\end_inset

 focuses more on the actual implementation, providing information on the
 programs making the project work and the required structure of its file
 system.
 It details how to build and use the programs generating the textures required
 by the main rendering application, as well as how to build and use the
 application itself.
\end_layout

\begin_layout Standard
Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Results-and-Performance"
plural "false"
caps "false"
noprefix "false"

\end_inset

 finally presents the end results with a few rendered models, showing off
 some of the capabilities of the complete project, whereas pictures in the
 previous sections were more aseptic, having to underline a specific technical
 aspect each.
 It also spends a few words on the overall performance of the rendering,
 including some stress-testing.
\end_layout

\begin_layout Subsection
Notation
\begin_inset CommandInset label
LatexCommand label
name "subsec:Notation"

\end_inset


\end_layout

\begin_layout Standard
Throughout this document I stick to the same notation, except where explicitly
 specified, which is as follows:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathbf{v}$
\end_inset

: bold fonts denote vectors
\end_layout

\begin_layout Itemize
\begin_inset Formula $(\mathbf{vw})$
\end_inset

 denotes the dot product of vectors 
\begin_inset Formula $\mathbf{v}$
\end_inset

 and 
\begin_inset Formula $\mathbf{w}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathbf{t}$
\end_inset

, 
\begin_inset Formula $\mathbf{b}$
\end_inset

, 
\begin_inset Formula $\mathbf{n}$
\end_inset

 are respectively the tangent, bitangent and normal (unit) vectors on a
 point of the surface of a model
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathbf{v}$
\end_inset

 is the view direction.
 It is a unit vector that always points from its base point on a surface
 to the observers's position
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathbf{l}$
\end_inset

 is the light direction.
 It is a unit vector that always points from its base point on a surface
 to the position of the light source
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathbf{h}$
\end_inset

 is the 
\begin_inset Formula $\mathbf{v}$
\end_inset

-
\begin_inset Formula $\mathbf{l}$
\end_inset

 half-vector (more properly the 
\begin_inset Quotes eld
\end_inset

half-way vector
\begin_inset Quotes erd
\end_inset

).
 It is a unit vector depending on the view and light directions and it's
 computed as 
\begin_inset Formula $\mathbf{h}=\frac{\mathbf{v}+\mathbf{l}}{\left\Vert \mathbf{v}+\mathbf{l}\right\Vert }$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Parts of this document referring to implementation details 
\emph on
outside
\emph default
 of section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Implementation-Details"
plural "false"
caps "false"
noprefix "false"

\end_inset

 are framed in a box just like this one.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Code excerpts are shown like this, with partial 
\begin_inset Quotes eld
\end_inset

syntax hilighting
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Folders, files and programs are all written in 
\begin_inset Formula $\mathtt{typewriter\,}$
\end_inset


\end_layout

\begin_layout Section
Quick Overview of Anisotropic Illumination Models
\begin_inset CommandInset label
LatexCommand label
name "sec:Anisotropic Models"

\end_inset


\end_layout

\begin_layout Subsection
Anisotropic Shading as opposed to Isotropic Shading
\end_layout

\begin_layout Standard
The Bidirectional Radiance Distribution Function (BRDF) is, in the phisical
 description of the illumination of surfaces, the function describing how
 a particular material emits back the light it receives from the environment.
 The graph of this function is 4-dimensional, as its domain and codomain
 are both bidimensional hemispheres.
 The description of such a function for any possible kind of actual physical
 material is a very complex task, which is why many different models have
 been proposed in computer graphics to strike a balance between physical
 accuracy and computational complexity, all the more so in the case of real-time
 graphics processing.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The two realms of illumination models I mean to discuss, as per the title
 of this subsection, derive their differences precisely from the intention
 of describing real life materials.
 In particular, they make different assumptions concerning the overall orientati
on of microscopical imperfections on the surface of these different kinds
 of material.
 Where isotropic models mean to describe surfaces whose imperfections have
 radial symmetry (given also their abundance in nature), their anisotropic
 counterpart concerns itself with the description of surfaces where these
 imperfections are aligned along a particular direction than another.
 This is the case, for example, in the natural occurrences of brushed metal,
 hair, vynil records and CDs (whose grooves have a concentrical orientation),
 and surfaces varnished with a stroke of coating.
\end_layout

\begin_layout Standard
Given the dependence of the re-emitted light on the orientation of these
 imperfections, an anisotropic illumination model needs to account for the
 orientation of the tangent plane to the surface (the direction of its tangent
 and bitangent vectors, as described in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Tangent-Space"
plural "false"
caps "false"
noprefix "false"

\end_inset

), and not just for the relative position of the view- (or incident light-)
 vector to the surface normal vector - which is the case for most isotropic
 models.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Below are presented a few models addressing the issue of anisotropic surfaces.
 Since the models are fairly old (in terms of computer graphics development
 history) we have to keep in mind that the simplest (and least physically
 accurate) of them, the Heidrich-Seidel 
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"
literal "false"

\end_inset

 model was developed for real time applications running on 1990s GPUs, and
 consequently concentrates on having the fastest implementation possible,
 while the Ward 
\begin_inset CommandInset citation
LatexCommand cite
key "key-5"
literal "false"

\end_inset

 and Ashikhmin-Shirley 
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"
literal "false"

\end_inset

 models where developed with (offline) ray-tracing applications in mind.
 The fast development of GPU processing power during the last two decades
 is what allows me, in this particular instance, to use these models for
 demanding tasks, even on real-time applications.
 This project will be mainly focused on the Ashikhmin-Shirley model, for
 reasons that will be discussed later in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Why-Ashikhmin-Shirley?"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsection
Heidrich-Seidel
\end_layout

\begin_layout Standard
This Phong-like model from 1998 means to describe anisotropic surfaces as
 (2D) bundles of one-dimensional strands (curves in 3D space) each having
 a tangent vector in each of its points.
 Given a point on a surface, it uses this tangent 
\begin_inset Formula $T$
\end_inset

 and the light-incidence direction 
\begin_inset Formula $L$
\end_inset

 to calculate a 
\begin_inset Quotes eld
\end_inset

shading normal vector
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $N'$
\end_inset

 which corresponds to the normal vector used for rendering one-dimensional
 strands.
 This vector is obtained implicitly as 
\begin_inset Formula 
\[
\left\langle L,N'\right\rangle =\sqrt{1-\left\langle L,T\right\rangle ^{2}}
\]

\end_inset

which represents the diffuse component of the model.
 Here and below, following the authors' notation, 
\begin_inset Formula $\left\langle V,W\right\rangle $
\end_inset

 represents the dot product of vectors 
\begin_inset Formula $V$
\end_inset

 and 
\begin_inset Formula $W$
\end_inset

.
 Similarly, the dot product of the view vector 
\begin_inset Formula $V$
\end_inset

 and the reflected light vector 
\begin_inset Formula $R$
\end_inset

 (against 
\begin_inset Formula $N'$
\end_inset

 instead of the surface normal 
\begin_inset Formula $N$
\end_inset

) is found to be 
\begin_inset Formula 
\[
\left\langle V,R\right\rangle =\sqrt{1-\left\langle L,T\right\rangle ^{2}}\sqrt{1-\left\langle V,T\right\rangle ^{2}}-\left\langle L,T\right\rangle \left\langle V,T\right\rangle 
\]

\end_inset

These values are then insterted in a Phong-like (-direct-light) equation
 representing the model:
\begin_inset Formula 
\[
I_{o}=k_{a}I_{a}+\left(k_{d}\left\langle L,N'\right\rangle +k_{s}\left\langle V,R\right\rangle ^{n}\right)I_{i}
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $k_{a}$
\end_inset

, 
\begin_inset Formula $k_{d}$
\end_inset

, 
\begin_inset Formula $k_{s}$
\end_inset

 are respectively the ambient, diffuse and specular coefficients
\end_layout

\begin_layout Itemize
\begin_inset Formula $I_{o}$
\end_inset

, 
\begin_inset Formula $I_{a}$
\end_inset

, 
\begin_inset Formula $I_{i}$
\end_inset

 are respectively the observed, ambient and incident light intensities
\end_layout

\begin_layout Itemize
\begin_inset Formula $n$
\end_inset

 is the Phong shininess coefficient
\end_layout

\begin_layout Standard
This model is clearly not bidirectional, it doesn't account for surface
 roughness, and doesn't conserve radiant energy, just like the (isotropic)
 Phong illumination model it is based on.
 Despite this, the authors describe a method to pre-process lookup textures
 storing the values of the square root-terms involved in the calculations,
 achieving the goal of the paper in terms of assuring a fast real-time rendering
 of anisotropic properties.
\end_layout

\begin_layout Subsection
Ward
\end_layout

\begin_layout Standard
This hybrid empirical- and theoretical- model by Ward means to offer a physics-b
ased, energy conserving, fully bidirectional anisotropic BRDF along with
 an explicit method for importance sampling of the halfway vectors 
\begin_inset Formula $\mathrm{\mathbf{h}}$
\end_inset

, for BRDF integration purposes.
\end_layout

\begin_layout Standard
It is parameterized by diffuse and specular coefficients
\begin_inset Formula $\rho_{d}$
\end_inset

 and 
\begin_inset Formula $\rho_{s}$
\end_inset

 and directional roughness coefficients 
\begin_inset Formula $\alpha_{x}$
\end_inset

 (along the tangent direction) and 
\begin_inset Formula $\alpha_{y}$
\end_inset

 (along the bitangent direction), all of which have a physical interpretation
 and can be used to fit empirical data obtained from sampling the BRDF of
 actual materials in a lab setting.
\end_layout

\begin_layout Standard
The model's BRDF is then built around a Gaussian distribution function with
 elliptical simmetry:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(\mathbf{v},\mathbf{l})=\frac{\rho_{d}}{\pi}+\rho_{s}\frac{1}{\sqrt{(\mathrm{\mathbf{nv}})(\mathbf{\mathrm{\mathbf{nl}}})}}\frac{1}{4\pi\alpha_{x}\alpha_{y}}e^{-2\frac{\left(\frac{(\mathbf{\mathrm{\mathbf{th}}})}{\alpha_{x}}\right)^{2}+\left(\frac{(\mathbf{\mathrm{\mathbf{bh}}})}{\alpha_{y}}\right)^{2}}{1+(\mathrm{\mathbf{nh}})}}
\]

\end_inset


\end_layout

\begin_layout Standard
Although the lighting model is solidly grounded on empirical data and a
 widely accepted distribution for microsurface orientation, it intentionally
 lacks geometry visibility and Fresnel reflectance terms.
 This is what most significantly separates it from the class of 
\begin_inset Quotes eld
\end_inset

modern
\begin_inset Quotes erd
\end_inset

 PBR (phisically-based rendering) shaders.
\end_layout

\begin_layout Standard
For the purposes of this project, it should also be noted that the Ward
 model, although it is endowed with an importance sampling method for the
 generation of the half-vectors 
\begin_inset Formula $h$
\end_inset

, doesn't offer an explicit distribution function for the said vectors,
 which would be useful in a Monte-Carlo setting (as pointed in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-3"
literal "false"

\end_inset

).
\end_layout

\begin_layout Subsection
Ashikhmin-Shirley
\begin_inset CommandInset label
LatexCommand label
name "subsec:Ashikhmin-Shirley"

\end_inset


\end_layout

\begin_layout Standard
This mostly theoretical Phong-based model proposes a bidirectional, energy
 conserving, Fresnel-reflectance weighted anisotropic specular BRDF.
 It also proposes an energy conserving diffuse term to use along the specular
 model, instead of a lambertian one.
 This diffuse term won't however be the focus of this project.
\end_layout

\begin_layout Standard
The specular BRDF is parameterized by two directional shininess coefficients
 
\begin_inset Formula $n_{u}$
\end_inset

 and 
\begin_inset Formula $n_{v}$
\end_inset

, which split the role of the Phong shininess coefficient 
\begin_inset Formula $n$
\end_inset

 in the tangent and bitangent directions.
\end_layout

\begin_layout Standard
The model crucially provides both an importance sampling generation process
 for half-vectors and their explicit distribution function.
 Since integration of the BRDF is done not in the space of half-vectors
 but in the space of incident light vectors, the authors provide the explicit
 relation between the distribution functions of the vectors in the two spaces
 mentioned above: 
\begin_inset Formula $p_{h}(\mathbf{h})=4(\mathbf{vh})p_{l}(\mathbf{l})$
\end_inset

 for 
\begin_inset Formula $\mathbf{l}=2(\mathbf{vh})\mathbf{h}-\mathbf{v}$
\end_inset

 (
\begin_inset Formula $\mathbf{h}$
\end_inset

 is the half-vector of vectors 
\begin_inset Formula $\mathbf{v}$
\end_inset

 and 
\begin_inset Formula $\mathbf{l}$
\end_inset

).
\end_layout

\begin_layout Standard
The authors describe:
\begin_inset Formula 
\[
p_{h}(\mathbf{h})=\frac{\sqrt{(n_{u}+1)(n_{v}+1)}}{2\pi}(\mathbf{nh})^{\frac{n_{u}(\mathbf{th})^{2}+n_{v}(\mathbf{bh})^{2}}{1-(\mathbf{nh})^{2}}}
\]

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Ashikhmin-Shirley-h-distribution"

\end_inset


\end_layout

\begin_layout Standard
And obtain the full specular BRDF as:
\begin_inset Formula 
\[
f_{s}(\mathbf{v},\mathbf{l})=\frac{p_{h}(\mathbf{h})F((\mathbf{vh}))}{4(\mathbf{vh})\max((\mathbf{nv}),(\mathbf{nl}))}
\]

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Ashikhmin-Shirley-specular-BRDF"

\end_inset


\end_layout

\begin_layout Standard
In the original paper as well as for the purposes of this project, the Fresnel
 reflectance term is estimated making use of the Schlick approximation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F((\mathbf{vh}))=F_{0}+(1-F_{0})(1-(\mathbf{vh}))^{5}=F_{0}(1-(1-(\mathbf{vh}))^{5})+(1-(\mathbf{vh}))^{5}
\]

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fresnel-reflectance-Schlick"

\end_inset


\end_layout

\begin_layout Standard
Anticipating the discussion contained in subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:BRDF-integration"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the final form of the Ashikhmin-Shirley (specular) BRDF, ready for Monte-Carlo
 integration with importance sampling, is:
\begin_inset Formula 
\[
f_{s}(\mathbf{v},\mathbf{l})=p_{l}(\mathbf{l})\left(F_{0}\frac{1-(1-(\mathbf{vh}))^{5}}{\max((\mathbf{nv}),(\mathbf{nl}))}+\frac{(1-(\mathbf{vh}))^{5}}{\max((\mathbf{nv}),(\mathbf{nl}))}\right)
\]

\end_inset


\end_layout

\begin_layout Section
Bump Mapping
\begin_inset CommandInset label
LatexCommand label
name "sec:Bump-Mapping"

\end_inset


\end_layout

\begin_layout Subsection
From vertex-level to fragment-level detail
\end_layout

\begin_layout Standard
It is common in computer graphics to want to obtain a certain level of detail
 on the rendered surface without having to indeterminately increase the
 resolution of the underlying mesh.
 This is most common in the texturing of a 3D model: the values of the color
 attribute attribute are removed from the vertices and given to a proxy,
 which in the case of UV-mapping (a common technique addressing the issue)
 is an image whose pixels (named texels) are accessed by their coordinates.
 The vertices then store their (u,v) position on such image and rasterization
 takes care of interpolating the attribute over the faces of the mesh.
\end_layout

\begin_layout Standard
The most important aspect of this process, for the goal of this project,
 is that not only can UV-mapping manage a fragment-level description of
 color, but a fragment-level description of vectors as well.
 The x, y, z components of a 3D vector are mapped respectively to the R,
 G, B channels of the texture image (which range between 0 and 
\begin_inset Formula $2^{i}-1$
\end_inset

, where 
\begin_inset Formula $i$
\end_inset

 is the bit depth of the image).
\end_layout

\begin_layout Standard
To maintain decent resolution in the mapping of vectors, this process works
 best for vector 
\begin_inset Quotes eld
\end_inset

fields
\begin_inset Quotes erd
\end_inset

 whose components are uniformly bounded by 
\begin_inset Quotes eld
\end_inset

small
\begin_inset Quotes erd
\end_inset

 constants, which is fortunately the case for the objects closest to our
 needs when implementing illumination models: unit vectors in 3D space.
 Their components all range, in fact, between -1 and 1.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
UV-mapping is what provides fragment-level precision (albeit with fixed
 resolution) to all of the calculations we are tasked to perform when implementi
ng illumination models.
 It is a very powerful instrument in real-time rendering, and one whose
 preservation is the main driving factor behind many of the (hardest) implementa
tion choices when treating Environment Mapping in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Environment-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Tangent Space
\begin_inset CommandInset label
LatexCommand label
name "subsec:Tangent-Space"

\end_inset


\end_layout

\begin_layout Standard
Since when mapping vectors to textures we are not actually mapping directly
 vector objects, but their components with respect to a certain frame of
 reference, we want this reference to be the most neutral space we can achieve.
 The meaning of this is that not only it shouldn't depend on model and view
 transformations, but it shouldn't depend on the coordinates of vertices
 in object space either.
 This is the reason why we express UV-mapped vectors in tangent space, which
 we define, per vertex, as the span of the plane 
\emph on
tangent
\emph default
 to the mesh in the vertex (which has a precise geometrical meaning) and
 the direction 
\emph on
normal
\emph default
 to the mesh in that same vertex (with the convention of taking it 
\emph on
outwards-pointing
\emph default
 in the case of a 2-manifold closed mesh)
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Thus, to find the vectors which form a basis of this tangent space, we must
 explain both how to find the 
\emph on
normal
\emph default
 
\begin_inset Formula $\mathbf{n}$
\end_inset

 vector and the 
\emph on
tangent
\emph default
 
\begin_inset Formula $\mathbf{t}$
\end_inset

 and 
\emph on
bitangent
\emph default
 
\begin_inset Formula $\mathbf{b}$
\end_inset

 vectors that form the basis of the tangent plane, to obtain an actual 
\begin_inset Formula $(\mathbf{t},\mathbf{b},\mathbf{n})$
\end_inset

 orthonormal frame of reference for the UV-mapped vectors.
\end_layout

\begin_layout Standard
Finding the 
\begin_inset Formula $\mathbf{n}$
\end_inset

 vector in a certain vertex V is usually achieved in computer graphics by
 averaging (with according weights) the 
\emph on
face normals
\emph default
 of all the faces sharing V, which themselves are easily computed through
 linear operations involving the vertices adjacent to V on each face.
\end_layout

\begin_layout Standard
Computing 
\begin_inset Formula $\mathbf{t}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b}$
\end_inset

 is, instead, where UV-mapping comes into play.
 This is because UV-mapping is the closest thing there is, in computer graphics,
 to explicitly determining a chart of the 2-manifold embedded in 3D space
 represented by the mesh.
 The process goes like this: the texture image is itself a 2D linear space,
 whose tangent space (in each texel) is the span of two orthogonal vectors
 
\begin_inset Formula $\mathbf{u}$
\end_inset

 and 
\begin_inset Formula $\mathbf{v}$
\end_inset

, respectively aligned along the 
\emph on
u
\emph default
 and 
\emph on
v
\emph default
 axis of the texture.
 Two vectors 
\begin_inset Formula $\mathbf{t'}$
\end_inset

, 
\begin_inset Formula $\mathbf{b'}$
\end_inset

 are constructed on V so that their UV-mapping (mathematically, the 
\emph on
differential
\emph default
 of the mapping) are resp.
 
\begin_inset Formula $\mathbf{u}$
\end_inset

 and 
\begin_inset Formula $\mathbf{v}$
\end_inset

.
 The issue with taking directly 
\begin_inset Formula $\mathbf{t}=\mathbf{t'}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b}=\mathbf{b'}$
\end_inset

 is that 
\begin_inset Formula $\mathbf{t'}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b'}$
\end_inset

are only orthogonal if the UV-mapping is conformal (i.
 e.
 it preserves angles) and even so, they are unit vectors only if the mapping
 is an isometry (i.
 e.
 it preserves distances), which it rarely is.
\end_layout

\begin_layout Standard
To obtain the orthonormal frame of reference mentioned above, 
\begin_inset Formula $(\mathbf{t'},\mathbf{b'},\mathbf{n})$
\end_inset

 is orthonormalized via the Gram-Schmidt process, setting 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
 & \mathbf{t}=\frac{\mathbf{t'}-(\mathbf{nt'})\mathbf{n}}{\left\Vert \mathbf{t'}-(\mathbf{nt'})\mathbf{n}\right\Vert }\\
 & \mathbf{b}=\mathbf{n\times\mathbf{t}}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
where the order of the cross product means the frame of reference will have
 positive orientation.
 Notice that, since the setting is 3-dimensional, we didn't actually have
 to determine 
\begin_inset Formula $\mathbf{b'}$
\end_inset

 for this purpose, but computer graphics usually compute it for completeness.
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $(\mathbf{t},\mathbf{b},\mathbf{n})$
\end_inset

 frame of reference obtained this way completely describes the space where
 both the UV-mapping of vectors and lighting calculations will be made in
 the implementation of this project.
 The fact that this reference frame is orthonormal grants that the transformatio
n from tangent space to object space is an orthogonal linear transformation,
 and as such preserves distances (hence dot products).
 In particular, this transformation is represented by the 3x3 matrix having
 the reference frame vectors as columns.
\end_layout

\begin_layout Subsection
Normal Mapping
\end_layout

\begin_layout Standard
Having set the context in which we can use textures to store values of vectors
 varying on the surface to be rendered, it is now time to mention the most
 widely used and readily available kind of vector mapping: Normal Maps.
\end_layout

\begin_layout Standard
The idea behind this method is that we can mimic the appearance of bumps
 and indentations over the surface without the need for tessellating and
 displacing elements of the mesh, achieving the goal instead by perturbing
 the surface normals at a fragment level.
\end_layout

\begin_layout Standard
The image value of the normal vector is store directly at coordinates (u,v)
 of the lookup texture, making the implementation of the mapping a straight
 texture read performed in the 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

.
\end_layout

\begin_layout Standard
The value of the normal at each point is then used to perform lighting calculati
ons againts view and light vectors (in this implementation, all of them
 are first mapped to tangent space).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Normal Maps
\begin_inset CommandInset label
LatexCommand label
name "fig:Normal-Mapping"

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/noNormMap.png
	width 20page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
no normal mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/withNormMap.png
	width 20page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
with normal mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/hammered_metal/normal.jpg
	width 20page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
the normal map texture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Normal-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows (isotropic) environment mapping with and without normal mapping,
 as well as the texture used to achieve the effect.
 Notice the bluish tint of the texture: normal maps describe 
\begin_inset Quotes eld
\end_inset

small
\begin_inset Quotes erd
\end_inset

 perturbations about the mesh normal, so each texel stores a vector value
 that in tangent space is 
\begin_inset Quotes eld
\end_inset

close
\begin_inset Quotes erd
\end_inset

 to the tangent space's 
\begin_inset Formula $\mathbf{n}=(0,0,1)^{\top}$
\end_inset

 normal vector (corresponding to a fully blue RGB triplet
\begin_inset Foot
status open

\begin_layout Plain Layout
Actually, 
\begin_inset Formula $(x,y,z)$
\end_inset

 vectors are mapped to 
\begin_inset Formula $(r,g,b)=\frac{1}{2}(x,y,z)+\frac{1}{2}$
\end_inset

, which means that the up vector in tangent space corresponds to a lighter
 
\begin_inset Formula $(0.5,0.5,1)$
\end_inset

 blue on the texture
\end_layout

\end_inset

).
\end_layout

\begin_layout Subsection
Quaternion Mapping
\begin_inset CommandInset label
LatexCommand label
name "subsec:Quaternion-Mapping"

\end_inset


\end_layout

\begin_layout Standard
Normal maps are enough in all of the cases where information about the normal
 vector alone is sufficient to perform lighting calculations.
 But if we were to apply normal maps as is, when implementing, for example,
 anisotropic shaders, the perturbed normals would reflect bumps over the
 surface, while tangents and bitangents would still be interpolated from
 the mesh's own vectors.
\end_layout

\begin_layout Standard
In a technical sense, the tangent space basis vectors could not be guaranteed
 to be orthonormal, and as such couldn't hope to describe an actual reference
 frame.
\end_layout

\begin_layout Standard
This issue, when left unattended, gives birth to weird lighting effects
 and has to be addressed when bump mapping with anisotropic shaders: not
 only should normals be perturbed, but the perturbation should involve the
 whole tangent space in the same way.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
One way of solving the issue (on the programmer's part) would be to ask
 artists authoring PBR materials to provide a tangent- and bitangent-map
 textures for anisotropic materials, then sampling them just like normal
 maps to obtain the perturbed versions of the corresponding vectors.
\end_layout

\begin_layout Standard
Such method would however amount to both unnecessary work on the artist's
 part and a threefold increase in memory occupation on the GPU.
\end_layout

\begin_layout Standard
A different approach I think better suits the problem is to consider the
 normal map authored by PBR artists not as the bump mapping itself, but
 as where the normals end up after a tangent-space-wide change of reference
 frame.
 This amounts to finding, for each 
\begin_inset Formula $(u,v)$
\end_inset

 coordinate, that particular linear transformation
\begin_inset Foot
status open

\begin_layout Plain Layout
This transformation maps the 
\begin_inset Formula $(\mathbf{t},\mathbf{b},\mathbf{n})$
\end_inset

 orthonormal basis to a perturbed orthonormal basis 
\begin_inset Formula $(\mathbf{t'},\mathbf{b'},\mathbf{n'})$
\end_inset

, preserving orientation.
 By definition, this transformation is a 
\emph on
rotation
\end_layout

\end_inset

 which, following the shortest path, maps the 
\begin_inset Formula $\mathbf{n}$
\end_inset

 tangent space vector to the 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\mathbf{n'}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
 value stored in the normal map texture.
\end_layout

\begin_layout Standard
This is a rotation from 
\begin_inset Formula $\mathbf{n}$
\end_inset

 to 
\begin_inset Formula $\mathbf{n'}$
\end_inset

, whose axis is perpendicular to both vectors, and as such surely lies in
 the tangent plane
\begin_inset Foot
status open

\begin_layout Plain Layout
Which is the subspace of vectors orthogonal to 
\begin_inset Formula $\mathbf{n}$
\end_inset


\end_layout

\end_inset

.
 Linear transformations are usually represented, in computer graphics, by
 their representation matrix with respect to known vector bases.
 Constructing and storing such a 3x3 matrix would however incur into issues
 similar to those discussed above, namely memory occupation.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The hunt for a solution to this problem brings us to the title of this subsectio
n: it is a well known fact that unit quaternions represent rotations of
 the 3-dimensional space.
 In particular, to each (unit) quaternion 
\begin_inset Formula $\mathbf{q}=a+b\mathbf{i}+c\mathbf{j}+d\mathbf{k}$
\end_inset

 is associated a unique rotation 
\begin_inset Formula $r_{\mathbf{q}}$
\end_inset

 (with the caveat that opposite quaternions represent the same rotation,
 i.e.
 
\begin_inset Formula $r_{\mathbf{q}}=r_{-\mathbf{q}}$
\end_inset

), which acts on a 3D vector 
\begin_inset Formula $\mathbf{v}=x\mathbf{i}+y\mathbf{j}+z\mathbf{k}$
\end_inset

 in the following way:
\begin_inset Formula 
\begin{align*}
r_{\mathbf{q}}(\mathbf{v}) & =\mathbf{q\mathbf{^{-1}v}q}\\
 & =\mathbf{\bar{q}\mathbf{v}q}\\
 & =(a-b\mathbf{i}-c\mathbf{j}-d\mathbf{k})(x\mathbf{i}+y\mathbf{j}+z\mathbf{k})(a+b\mathbf{i}+c\mathbf{j}+d\mathbf{k})
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Where all of the products are quaternion products, which incidentally distribute
 over the sum.
\end_layout

\begin_layout Standard
Furthermore, the quaternion representing a rotation of axis 
\begin_inset Formula $\mathbf{l}=r\mathbf{i}+s\mathbf{j}+t\mathbf{k}$
\end_inset

 (
\begin_inset Formula $\mathbf{l}$
\end_inset

 being a unit vector) and angle 
\begin_inset Formula $\alpha$
\end_inset

 can be calculated as:
\begin_inset Formula 
\[
\mathbf{q_{l,\alpha}=\cos\left(\frac{\alpha}{\mathrm{2}}\right)}+\sin\left(\frac{\alpha}{\mathrm{2}}\right)(r\mathbf{i}+s\mathbf{j}+t\mathbf{k})=a+b\mathbf{i}+c\mathbf{j}+d\mathbf{k}
\]

\end_inset


\end_layout

\begin_layout Standard
In the setting discussed above, the fact that the tangent space rotation
 has axis lying in the tangent plane
\begin_inset Foot
status open

\begin_layout Plain Layout
i.e.
 
\begin_inset Formula $t=0$
\end_inset


\end_layout

\end_inset

 translates directly to its representing quaternion having 
\begin_inset Formula $d=t\sin\left(\frac{\alpha}{\mathrm{2}}\right)$
\end_inset

 component equal to 0.
\end_layout

\begin_layout Standard
We then search for one of the two unit quaternions satisfying:
\begin_inset Formula 
\begin{align*}
\mathbf{n'} & =\mathbf{\bar{q}}\mathbf{n}\mathbf{q}\\
x\mathbf{i}+y\mathbf{j}+z\mathbf{k} & =(a-b\mathbf{i}-c\mathbf{j})(0\mathbf{i}+0\mathbf{j}+1\mathbf{k})(a+b\mathbf{i}+c\mathbf{j})\\
x\mathbf{i}+y\mathbf{j}+z\mathbf{k} & =(a-b\mathbf{i}-c\mathbf{j})(a\mathbf{k}+b\mathbf{j}-c\mathbf{i})\\
x\mathbf{i}+y\mathbf{j}+z\mathbf{k} & =-2ac\mathbf{i}+2ab\mathbf{j}+(a^{2}-b^{2}-c^{2})\mathbf{k}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Which amounts to solving, for parameters 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

, the nonlinear system:
\begin_inset Formula 
\[
\begin{cases}
ac & =-\frac{x}{2}\\
ab & =\frac{y}{2}\\
a^{2}-b^{2}-c^{2} & =z\\
a^{2}+b^{2}+c^{2} & =1
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
This gives, choosing 
\begin_inset Formula $a\geq0$
\end_inset

 (for 
\begin_inset Formula $a\leq0$
\end_inset

 we obtain the opposite quaternion, representing the same rotation):
\begin_inset Formula 
\[
\begin{cases}
a & =\sqrt{\frac{z+1}{2}}\\
b & =\sqrt{\frac{y^{2}}{2(z+1)}}\\
c & =\sqrt{\frac{x^{2}}{2(z+1)}}
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
Notice that in the implementation, once the value of 
\begin_inset Formula $a$
\end_inset

 has been computed, the other two parameters can be obtained as 
\begin_inset Formula $b=\frac{y}{2a}$
\end_inset

 and 
\begin_inset Formula $c=-\frac{x}{2a}$
\end_inset

, simplifying calculations.
\end_layout

\begin_layout Standard
Having no need to store a 
\begin_inset Formula $d$
\end_inset

 value, it is possible to store the vector 
\begin_inset Formula $(a,b,c)$
\end_inset

 in a texture, just like a normal map and most importantly with exactly
 the same impact on memory, but with information ready to compute the whole
 perturbed tangent space.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
This quaternion texture can and therefore should be precomputed, which,
 in the implementation of this project, is what the 
\begin_inset Formula $\mathtt{setupRotationMapping.exe}$
\end_inset

 executable was designed for.
\end_layout

\begin_layout Plain Layout
It takes a normal map as input, it performs the calculations described above,
 and it returns a texture of the same width and height of the input image,
 storing the quaternion map.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Subsequently, at the 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

 stage of rendering a model, the texture is read and its values are used
 to compute the perturbed 
\begin_inset Formula $\mathbf{t'}$
\end_inset

, 
\begin_inset Formula $\mathbf{b'}$
\end_inset

 and 
\begin_inset Formula $\mathbf{n'}$
\end_inset

 vectors, by having 
\begin_inset Formula $\mathbf{q}=a+b\mathbf{i}+c\mathbf{j}$
\end_inset

 act on the tangent space basis vectors:
\begin_inset Formula 
\begin{align*}
\mathbf{t'} & =\mathbf{\bar{q}\mathbf{t}q} & =(a-b\mathbf{i}-c\mathbf{j})\mathbf{i}(a+b\mathbf{i}+c\mathbf{j}) & =(a^{2}+b^{2}-c^{2},2bc,2ac)\\
\mathbf{b'} & =\mathbf{\bar{q}\mathbf{b}q} & =(a-b\mathbf{i}-c\mathbf{j})\mathbf{j}(a+b\mathbf{i}+c\mathbf{j}) & =(2bc,a^{2}-b^{2}+c^{2},2ab)\\
\mathbf{n'} & =\mathbf{\bar{q}\mathbf{n}q} & =(a-b\mathbf{i}-c\mathbf{j})\mathbf{k}(a+b\mathbf{i}+c\mathbf{j}) & =(-2ac,2ab,a^{2}-b^{2}-c^{2})
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Quaternion mapping overall achieves the goal of uniformly perturbing the
 tangent space, with minimal calculations to be performed in the fragment
 shader, while having the same impact on memory as usual normal mapping
 (the normal map itself is not needed anymore, as the perturbed normal can
 be calculated from the quaternion map, just like the other vectors).
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement !th
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Quaternion Maps
\begin_inset CommandInset label
LatexCommand label
name "fig:Quaternion-Mapping"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/onlyNormalQuat.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
only normal mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/onlyTangentQuat.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
only tangent and bitangent mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/withQuat.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
full quaternion mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename textures/hammered_metal/quaternion.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
the quaternion map obtained from the normal map in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Normal-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:the-quaternion-map"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As shown in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Quaternion-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, full tangent space perturbation is needed to properly model anisotropic
 reflections, all the more so near parts of the surface where the perturbation
 achieved by bump mapping is more pronounced (in this particular case, near
 the edges of the bumps).
\end_layout

\begin_layout Standard
The reddish tint of figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:the-quaternion-map"
plural "false"
caps "false"
noprefix "false"

\end_inset

 underlines how mapped quaternions are 
\begin_inset Quotes eld
\end_inset

small
\begin_inset Quotes erd
\end_inset

 perturbations of the identity quaternion 
\begin_inset Formula $1+0\mathbf{i}+0\mathbf{j}+0\mathbf{k}$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Which is mapped to the RGB triplet 
\begin_inset Formula $\left(1,\frac{1}{2},\frac{1}{2}\right)$
\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Tangent Plane Rotation (TPR) Mapping
\begin_inset CommandInset label
LatexCommand label
name "subsec:Tangent-Plane-Rotation"

\end_inset


\end_layout

\begin_layout Standard
In subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Quaternion-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, a choice was made of the particular rotation mapping 
\begin_inset Formula $\mathbf{n}$
\end_inset

 to 
\begin_inset Formula $\mathbf{n'}$
\end_inset

, selecting the 
\begin_inset Quotes eld
\end_inset

shortest
\begin_inset Quotes erd
\end_inset

 rotation, i.e.
 the one with axis perpendicular to both 
\begin_inset Formula $\mathbf{n}$
\end_inset

 and 
\begin_inset Formula $\mathbf{n'}$
\end_inset

, among all of the possible rotations achieving the same result.
\end_layout

\begin_layout Standard
In fact, this class of rotations can be characterized as the collection
 of all rotations of the kind 
\begin_inset Formula $r=\bar{r}\circ r^{\top}$
\end_inset

, where 
\begin_inset Formula $\bar{r}$
\end_inset

 is the rotation mentioned above, as selected in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Quaternion-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, and 
\begin_inset Formula $r^{\top}$
\end_inset

 is 
\emph on
any
\emph default
 rotation of the tangent 
\emph on
plane
\emph default
, that is to say any one having 
\begin_inset Formula $\mathbf{n}$
\end_inset

 as rotation axis.
\end_layout

\begin_layout Standard
This behaviour underlines the complexity of the space of 3D rotations, compared
 to their 2D counterpart, and allows for effects only achievable by anisotropic
 shaders, given their reliance on the state of the whole tangent space.
 Tangent and bitangent vectors can in fact be rotated in the tangent plane
 to describe non-trivial variations of the microsurface distribution orientation
 across the surface.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
This subsection focuses on how to describe an arbitrary tangent plane rotation
 
\begin_inset Formula $r^{\top}$
\end_inset

, how to implement it in the shader and how to compose it with other transformat
ions like tangent space perturbations discussed before.
\end_layout

\begin_layout Standard
To rotate the whole tangent plane, both the 
\begin_inset Formula $\mathbf{t}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b}$
\end_inset

 vectors should be rotated the same way.
 Since they should always be perpendicular, a quick simplification is to
 fix, for any arbitrary tangent vector 
\begin_inset Formula $\mathbf{t}$
\end_inset

, its corresponding
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Formula $\mathbf{b}$
\end_inset

 is effectively obtained from 
\begin_inset Formula $\mathbf{t}$
\end_inset

 by rotating it 
\begin_inset Formula $90\textdegree$
\end_inset

 around the normal 
\begin_inset Formula $\mathbf{n}$
\end_inset


\end_layout

\end_inset

 bitangent vector 
\begin_inset Formula $\mathbf{b}$
\end_inset

 as 
\begin_inset Formula $\mathbf{b}=J\mathbf{t}$
\end_inset

, where:
\begin_inset Formula 
\[
J=\left(\begin{array}{ccc}
0 & -1 & 0\\
1 & 0 & 0\\
0 & 0 & 1
\end{array}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
This convention allows us to only have to rotate 
\begin_inset Formula $\mathbf{t}$
\end_inset

 in the tangent plane and retrieve 
\series bold

\begin_inset Formula $\mathbf{b}$
\end_inset

 
\series default
immediately after.
\end_layout

\begin_layout Standard
Two paths can be followed to rotate 
\begin_inset Formula $\mathbf{t}$
\end_inset

: the first would be to store an angle 
\begin_inset Formula $\vartheta$
\end_inset

 in a 1-channel texture, representing the angle of rotation about the 
\begin_inset Formula $\mathbf{n}$
\end_inset

 axis.
 This however would require calculating goniometric functions and matrix
 multiplication in the fragment shader.
\end_layout

\begin_layout Standard
The second path is the one I implemented in this project: I store the two
 components
\begin_inset Foot
status open

\begin_layout Plain Layout
The two nontrivial components: a tangent vector always has its third component
 equal to 0
\end_layout

\end_inset

 of the rotated tangent vector (in tangent space coordinates), in a 2-channel
 texture.
 They are then passed to the 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

 as they are to compute the modified 
\begin_inset Formula $\mathbf{t}$
\end_inset

 vector.
\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
The generation of this texture, as implemented for this project, is performed
 in the 
\begin_inset Formula $\mathtt{generateTangentPlaneTexture.exe}$
\end_inset

 program.
 It revolves around two lines of code computing the vector's 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 components as functions of the texture's 
\begin_inset Formula $(u,v)$
\end_inset

 coordinates.
\end_layout

\begin_layout Plain Layout
Here is an example of the functions generating the TPR mapping used in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tangent-Space-Rotation"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

float x = glm::cos(PI*v); // x(u,v)
\end_layout

\begin_layout Plain Layout

float y = glm::sin(PI*v); // y(u,v)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Plain Layout
This program actually generates a 4-channel RGBA texture, since it supports,
 on its third and fourth channels, the definition of a UV map for the directiona
l roughnesses 
\begin_inset Formula $\alpha_{x}$
\end_inset

 and 
\begin_inset Formula $\alpha_{y}$
\end_inset

 used by anisotropic shaders.
 However, as explained in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Environment-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the preprocessing required for achieving smooth real-time bumped environment
 mapping needs the roughness values to be fixed across the whole application.
 These components are thus ignored by the main application, but their values
 can be set across the texture by modifying these lines of code (their current
 state reflects the RGBA TPR map in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tangent-Space-Rotation"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++},basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

float m = 0.1; // principal roughness, i.e.
 alpha_x
\end_layout

\begin_layout Plain Layout

float n = 1.0; // orthogonal roughness, i.e.
 alpha_y
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
In direct-light anisotropic renderings, the full TPR/roughness mapping can
 be tailor-made to achieve a wider range of effects, albeit sacrificing
 the beauty of environment mapping
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Plain Layout
A different use for the same tool would be to help artists authoring complex
 UV-mapped models with anisotropic reflecting surfaces in the UV-mapping
 itself.
 It is often the case, in fact, that UV maps must be split along seams in
 the mesh, mapping parts of the mesh to different areas in the texture image,
 cramming and rotating them to make use of the most possible space.
 To maintain correct anisotropy, the orientation of these mapped regions
 would be constrained to a fixed direction, introducing issues when cramming
 them.
 Through the use of a parallel TPR texture, instead, the artist is allowed
 to rotate each mapped mesh component as needed, letting TPR manage the
 issue of anisotropy directions on the surface of the model.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The results of this process are shown in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tangent-Space-Rotation"
plural "false"
caps "false"
noprefix "false"

\end_inset

, as well as the result of composing quaternion and TPR mapping on the same
 model.
 Composing the effects is actually really simple, since rotations (in this
 case in three dimensions) are linear transformations.
 This lets us apply bump mapping straight to the rotated 
\begin_inset Formula $\mathbf{t}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b}$
\end_inset

 (
\begin_inset Formula $\mathbf{n}$
\end_inset

 is unaffected by TPR mapping) and achieve their composite effect.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Tangent Space Rotation Mapping
\begin_inset CommandInset label
LatexCommand label
name "fig:Tangent-Space-Rotation"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/noDiffMap.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
without TPR mapping
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/withDiffMap.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
with TPR mapping
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/withBoth.png
	width 45text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
composed mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/hammered_metal/rotation.png
	width 45text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
the corresponding TPR map
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Parallax Occlusion Mapping (POM)
\end_layout

\begin_layout Standard
POM is a displacement technique that modifies the (u,v) coordinates used
 for texture sampling based on the view direction 
\begin_inset Formula $\mathbf{v}$
\end_inset

 and the height map of the material.
 It is a method for simulating visibility occlusion due to parallax effects
 without actually displacing elements of the mesh.
\end_layout

\begin_layout Standard
Its effects are scalable by a 
\begin_inset Formula $\mathtt{uniform\,float\,heightScale}$
\end_inset

 factor ranging between 0 and 1 passed to the 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

 by the application.
 It works best on isometric UV-mappings, due to the fact that the resulting
 displacement step is calculated in texture space and it is uniform in all
 directions within this space (meaning it is not uniform in all directions
 on the surface in the case of a non-isometric UV-mapping)
\begin_inset Foot
status open

\begin_layout Plain Layout
There is a geometric way to compensate this effect, but it would involve
 computing the riemannian metric of the immersed surface (the first fundamental
 form), which could easily be done for any UV-mapping.
 This is however outside the scope of this project and it wasn't implemented.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I implemented this method based on
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-3"
literal "false"

\end_inset

's implementation with minimal modifications, since its inclusion is marginal
 to the goal of the project.
 As a consequence, I refer to 
\begin_inset CommandInset href
LatexCommand href
name "LearnOpenGL - Parallax Mapping"
target "https://learnopengl.com/Advanced-Lighting/Parallax-Mapping"
literal "false"

\end_inset

 for details on its implementation.
\end_layout

\begin_layout Standard
Unlike the previous methods, which needed a thorough explanation of the
 underlying mathematical models and choices in implementation, lacking an
 external reference, I have opted for a quicker overview of this particular
 method.
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Parallax-Occlusion-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows POM effects for increasing values of 
\begin_inset Formula $\mathtt{heightScale}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Parallax Occlusion Mapping
\begin_inset CommandInset label
LatexCommand label
name "fig:Parallax-Occlusion-Mapping"

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/noPOM.png
	width 20page%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
heightScale = 0
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/lowPOM.png
	width 20page%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
heightScale = 0.1
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/highPOM.png
	width 20page%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
heightScale = 0.3
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Environment Mapping
\begin_inset CommandInset label
LatexCommand label
name "sec:Environment-Mapping"

\end_inset


\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
Environment mapping is a lighting technique whose purpose is to account
 for incoming radiance from the whole environment surrounding the model
 to be rendered, instead of just summing the contributions of a discrete
 collection of point and directional lights.
\end_layout

\begin_layout Standard
It is best suited for a PBR setting and it achieves a physical realism hardly
 obtainable by discrete light sources.
 Since the integration of the lighting equation (for arbitrary environment
 radiance) is a heavy task for real-time rendering, this method has to introduce
 a set of approximations that let us perform as much numerical integration
 as possible before the application doing the rendering even runs.
 Its results are stored in appropriate texture formats read by the application
 at the time of rendering.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The main ingredient in this kind of lighting is the data describing incoming
 radiance.
 The most widely available arrangement for this data is the 3-channel 
\begin_inset Formula $\mathtt{hdr}$
\end_inset

 image format
\begin_inset Foot
status open

\begin_layout Plain Layout
Hence the use of the term Image Based Lighting (IBL) for this kind of environmen
t mapping
\end_layout

\end_inset

, whose RGB values are stored as floats to span a High Dynamic Range.
 Artists usually author these environment maps in spherical coordinates,
 resulting in a rectangular picture (called an 
\emph on
equirectangular
\emph default
 format).
 To ensure faster computation
\begin_inset Foot
status open

\begin_layout Plain Layout
Avoiding having to evaluate goniometric functions during rendering
\end_layout

\end_inset

, it is usually preferred to remap this picture to six 
\begin_inset Formula $\mathtt{hdr}$
\end_inset

 files representing a cubemap, more easily accessible by the rendering process
 (in the 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

).
\end_layout

\begin_layout Subsubsection
The Epic Games method for isotropic specular EM
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

 does a great job of describing how to implement environment mapping for
 the Cook-Torrance GGX (isotropic) illumination model.
 Its 
\begin_inset CommandInset href
LatexCommand href
name "[LearnOpenGL: Specular IBL]"
target "https://learnopengl.com/PBR/IBL/Specular-IBL"
literal "false"

\end_inset

 chapter is based on a paper by Epic
\begin_inset space ~
\end_inset

Games
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-2"
literal "false"

\end_inset

 describing the implementation of GGX in Unreal Engine 4
\begin_inset Foot
status open

\begin_layout Plain Layout
The Epic Games paper is itself a real-time adaption of a Disney paper, but
 I think it's best to limit excessive reference meandering
\end_layout

\end_inset

.
 This paper is also the source of the approximation choices having to be
 made to achieve fully pre-processed numerical integrations, whose results
 are used by IBL
\begin_inset Foot
status open

\begin_layout Plain Layout
Albeit these allow for full preprocessing of only isotropic models
\end_layout

\end_inset

.
 The two main simplifications operated by this paper are: 
\end_layout

\begin_layout Enumerate
the split sum approximation, which splits the specular lighting equation
 integral into the product of the integrals of the radiance and that of
 the BRDF
\end_layout

\begin_layout Enumerate
the Fresnel-Schlick approximation of the Fresnel reflectance, which allows
 for splitting the BRDF integral into two components
\begin_inset CommandInset label
LatexCommand label
name "enu:the-Fresnel-Schlick-approximatio"

\end_inset


\end_layout

\begin_layout Standard
The approximation mentioned in point
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "enu:the-Fresnel-Schlick-approximatio"
plural "false"
caps "false"
noprefix "false"

\end_inset

 allows for the integration of terms that do not depend on the value of
 
\begin_inset Formula $F_{0}$
\end_inset

, the Fresnel reflectance at normal incidence, whose value can be set and
 passed to the 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

 by the application.
 The fragment shader then uses this value to compute the actual result of
 the full integral.
\end_layout

\begin_layout Standard
The actual numerical integration is eventually performed in a Monte-Carlo
 setting with importance sampling of the half-vectors 
\begin_inset Formula $\mathbf{h}$
\end_inset

.
 The radiance integral results are stored in a 
\begin_inset Quotes eld
\end_inset

prefiltered irradiance
\begin_inset Quotes erd
\end_inset

 cubemap texture, while the two BRDF integral components are stored in a
 2-channel texture whose (u,v) coordinates are the value of the 
\begin_inset Formula $(\mathbf{nv})$
\end_inset

 product and the value of the (isotropic) roughness 
\begin_inset Formula $\alpha$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Adapting the Epic Games method to anisotropic models
\begin_inset CommandInset label
LatexCommand label
name "subsec:Adapting-the-Epic"

\end_inset


\end_layout

\begin_layout Standard
I will refer to 
\begin_inset CommandInset href
LatexCommand href
name "[LearnOpenGL: Specular IBL]"
target "https://learnopengl.com/PBR/IBL/Specular-IBL"
literal "false"

\end_inset

 for the implementation of a preprocessed-GGX-environment-mapped lighting
 model and its explanation, whereas here I want to detail the design choices
 involved in adapting the method mentioned above to anisotropic illumination
 models, while keeping full support for bump mapping and the unpredictability
 of the tangent space's orientation it entails.
\end_layout

\begin_layout Enumerate

\emph on
Roughness values 
\begin_inset Formula $\alpha_{x}$
\end_inset

 and 
\begin_inset Formula $\alpha_{y}$
\end_inset

 are fixed.

\emph default
 This is due to the fact that the BRDF lookup texture (LUT), for reasons
 described in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:BRDF-integration"
plural "false"
caps "false"
noprefix "false"

\end_inset

, as well as the half-vector LUT used for importance sampling and detailed
 in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Importance-Sampling"
plural "false"
caps "false"
noprefix "false"

\end_inset

, would both need to be 4D textures to accomodate roughness dependance.
 This is an absurd requirement in terms of storage space occupancy that
 cannot be satisfied in any way at high enough texture resolution.
\end_layout

\begin_layout Enumerate

\emph on
Importance sampling is also preprocessed.

\emph default
 This means that, for fixed roughness values, a LUT mapping the unit square
 to the model's half-vectors
\begin_inset Foot
status open

\begin_layout Plain Layout
In cartesian 
\emph on
tangent space
\emph default
 coordinates, according to their distribution, which is determined by the
 specific illumination model and the roughness values
\end_layout

\end_inset

 is generated by a dedicated program.
 This texture is then sampled both during the real-time radiance integration
 detailed below and within the program performing the BRDF integration,
 which returns the BRDF LUT.
 This preprocessing step helps to avoid having to evaluate processing-power-heav
y functions during rendering, while in the same way it helps speeding up
 the generation of the BRDF LUT.
\end_layout

\begin_layout Enumerate

\emph on
Radiance integration must be performed real-time.

\emph default
 Due to the dependence of anisotropic illumination models on the orientation
 of the tangent space and not just the normal vector, it is impossible to
 generate a 
\begin_inset Quotes eld
\end_inset

prefiltered irradiance cubemap
\begin_inset Quotes erd
\end_inset

 like Epic Games does.
 This is true in general for any non-convex mesh
\begin_inset Foot
status open

\begin_layout Plain Layout
Non-convex meshes are very likely to have a pair of points whose light vectors
 point to the same cubemap texel, but whose tangents have different directions,
 resulting in different anisotropic lighting
\end_layout

\end_inset

 and even more true as soon as bump-mapping comes into play.
 This step is therefore the most performance-affecting of the environment
 mapping steps, and its impact can only be controlled by dynamically adjusting
 the number of samples used to integrate the environment radiance numerically.
 Speaking of which, it should be noted that lower levels of roughness always
 require fewer samples to achieve comparable results
\begin_inset Foot
status open

\begin_layout Plain Layout
This is due to the fact that lower values of roughness mean that the distributio
n of the half-vectors will tend to concentrate sample within a smaller region
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate

\emph on
The BRDF LUT is indexed by 
\begin_inset Formula $(\mathbf{nv})$
\end_inset

 and 
\begin_inset Formula $\phi$
\end_inset


\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
The azimuthal angle of 
\begin_inset Formula $\mathbf{v}$
\end_inset

, i.e.
 the angle between 
\begin_inset Formula $\mathbf{t}$
\end_inset

 and the projection of 
\begin_inset Formula $\mathbf{v}$
\end_inset

 onto the tangent plane, following the notation in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Notation"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fn:The-azimuthal-angle"

\end_inset


\end_layout

\end_inset

, whereas Epic Games's one was indexed by 
\emph on

\begin_inset Formula $(\mathbf{nv})$
\end_inset

 
\emph default
and
\emph on
 
\begin_inset Formula $\alpha$
\end_inset


\emph default
, the isotropic roughness.
 Anisotropic illumination models need information regarding the rotational
 configuration of 
\begin_inset Formula $\mathbf{v}$
\end_inset

 with respect to 
\begin_inset Formula $\mathbf{n}$
\end_inset

, as well as its inclination, unlike isotropic ones which only need the
 latter.
 These two parameters allow us to completely reconstruct the view vector
 in tangent space coordinates, where the half-vector sampling and the BRDF
 integration are performed.
\end_layout

\begin_layout Subsection
Diffuse Component
\end_layout

\begin_layout Standard
The diffuse lighting component is not affected by anisotropy, which means
 that the radiance integration can be performed following 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

's method, detailed at 
\begin_inset CommandInset href
LatexCommand href
name "[LearnOpenGL: Diffuse Irradiance]"
target "https://learnopengl.com/PBR/IBL/Diffuse-irradiance"
literal "false"

\end_inset

, step by step.
\end_layout

\begin_layout Standard
I use a lambertian diffuse model to keep things simple, since diffusion
 is an important part of phisically based rendering, but it isn't the focus
 of this project
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
For ease of use, remapping of equirectangular 
\begin_inset Formula $\mathtt{hdr}$
\end_inset

 files (to generate the environment cubemap) and generation of the diffuse
 irradiance cubemap are both done by the same program: 
\begin_inset Formula $\mathtt{cubeMapping\_fromEquirectangular.exe}$
\end_inset

.
 It takes the name of the environment map directory (within the textures
 folder) as input, which can be set at this line of code in the 
\begin_inset Formula $\mathtt{cpp}$
\end_inset

 file:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

std::string folderName = "arches/";
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
The EM directory should contain an 
\begin_inset Formula $\mathtt{hdr}$
\end_inset

 file named 
\begin_inset Formula $\mathtt{equirectangular.hdr}$
\end_inset

 and, at least on computers running on Windows, folders 
\begin_inset Formula $\mathtt{environment}$
\end_inset

 and 
\begin_inset Formula $\mathtt{irradiance}$
\end_inset

.
 Running the program renders a cube with shaders 
\begin_inset Formula $\mathtt{cubemap.vert}$
\end_inset

 and 
\begin_inset Formula $\mathtt{equi\_to\_cube.frag}$
\end_inset

 and saves the cube's faces in the 
\begin_inset Formula $\mathtt{environment}$
\end_inset

 folder.
 It then convolutes the environment map to obtain its diffuse irradiance
 map while rendering the same cube with shaders 
\begin_inset Formula $\mathtt{cubemap.vert}$
\end_inset

 and 
\begin_inset Formula $\mathtt{convolution.frag}$
\end_inset

 and saves its faces in the 
\begin_inset Formula $\mathtt{irradiance}$
\end_inset

 folder.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Specular Component
\end_layout

\begin_layout Subsubsection
Why Ashikhmin-Shirley?
\begin_inset CommandInset label
LatexCommand label
name "subsec:Why-Ashikhmin-Shirley?"

\end_inset


\end_layout

\begin_layout Standard
Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Anisotropic Models"
plural "false"
caps "false"
noprefix "false"

\end_inset

 presents three different approaches to anisotropic illumination.
 Only one of those models was implemented in this project
\begin_inset Foot
status open

\begin_layout Plain Layout
Previous versions were point-light-based instead of environment-mapped,
 showing the results of rendering with all three models, as well as with
 various isotropic ones
\end_layout

\end_inset

: Ashikhmin-Shirley.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The reason behind this choice is mainly due to the fact that environment
 mapping looks the best in a physically based setting, which immediately
 eliminates the Heidrich-Seidel model from the picture.
\end_layout

\begin_layout Standard
As for Ward's model, although it finds its roots in physical reality, it
 purposefully lacks both Fresnel reflectance and geometry visibility terms,
 which have now become staples of PBR.
 More importantly, while it does provide a method for importance sampling,
 it doesn't explicitly provide the distribution of the sampled half-vectors,
 making Monte-Carlo integration converge more slowly, since it can't be
 weighted against the probability density.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
As explained in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Ashikhmin-Shirley"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the Ashikhmin-Shirley provides the perfect tools and setting for implementing
 efficient environment mapping.
\end_layout

\begin_layout Standard

\emph on
Important note:
\emph default
 I have until now referred to 
\begin_inset Formula $\alpha_{x}$
\end_inset

 and 
\begin_inset Formula $\alpha_{y}$
\end_inset

 as (directional) roughness values, ranging between 0 and 1.
 Ashikhmin-Shirley's analogous parameters are instead terms 
\begin_inset Formula $n_{u}$
\end_inset

 and 
\begin_inset Formula $n_{v}$
\end_inset

, each with values greater or equal to 1, which can be considered respectively
 as 
\begin_inset Formula $\frac{1}{\alpha_{x}^{2}}$
\end_inset

 and 
\begin_inset Formula $\frac{1}{\alpha_{y}^{2}}$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Importance Sampling
\begin_inset CommandInset label
LatexCommand label
name "subsec:Importance-Sampling"

\end_inset


\end_layout

\begin_layout Standard
As explained in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Adapting-the-Epic"
plural "false"
caps "false"
noprefix "false"

\end_inset

, preprocessing the sampling of half-vectors plays an important part in
 reducing the load of work left to real-time rendering.
 Luckily, Ashikhmin-Shirley provides
\begin_inset Foot
status open

\begin_layout Plain Layout
Having fixed 
\begin_inset Formula $n_{u}$
\end_inset

 and 
\begin_inset Formula $n_{v}$
\end_inset


\end_layout

\end_inset

 a way to map two uniformly distributed 
\begin_inset Formula $(\xi_{1},\xi_{2})$
\end_inset

 sample values on the interval 
\begin_inset Formula $[0,1]$
\end_inset

 to the spherical coordinates of half-vectors 
\begin_inset Formula $\mathbf{h}$
\end_inset

 whose distribution (in the tangent space) is 
\begin_inset Formula $p_{h}$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
See
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Ashikhmin-Shirley-h-distribution"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

.
 That is, it provides functions 
\begin_inset Formula $(\phi,\theta):\left[0,1\right]\times\left[0,1\right]\rightarrow\left[0,2\pi\right)\times\left[0,\frac{\pi}{2}\right]$
\end_inset

, for fixed 
\begin_inset Formula $n_{u}$
\end_inset

, 
\begin_inset Formula $n_{v}$
\end_inset

, mapping the unit square to the upper hemisphere (in spherical coordinates)
 of the unit sphere:
\begin_inset Formula 
\begin{align*}
\phi_{red}(t) & =\arctan\left(\sqrt{\frac{n_{u}+1}{n_{v}+1}}\tan\left(\frac{\pi}{2}t\right)\right)\\
\phi(\xi_{1},\xi_{2}) & =\begin{cases}
\phi_{red}(4\xi_{1}) & \xi_{1}\in\left[0,\frac{1}{4}\right)\\
\pi-\phi_{red}(2-4\xi_{1}) & \xi_{1}\in\left[\frac{1}{4},\frac{1}{2}\right)\\
\pi+\phi_{red}(4\xi_{1}-2) & \xi_{1}\in\left[\frac{2}{4},\frac{3}{4}\right)\\
2\pi-\phi_{red}(4-4\xi_{1}) & \xi_{1}\in\left[\frac{3}{4},1\right]
\end{cases}\\
\theta(\xi_{1},\xi_{2}) & =\arccos\left(\left(1-\xi_{2}\right)^{\frac{1}{n_{u}\cos^{2}\phi+n_{v}\sin^{2}\phi+1}}\right)
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Using 
\begin_inset Formula $(\xi_{1},\xi_{2})$
\end_inset

 as (u,v) coordinates, it is then possible to map the half-vector 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $(\phi,\theta)$
\end_inset

 to cartesian coordinates (
\begin_inset Formula $\mathbf{h}=(x,y,z)$
\end_inset

) and store its components in the first three channels of an RGBA texture,
 whose alpha channel can also be used to store the value of
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
 
\begin_inset Formula $p_{h}(\mathbf{h})$
\end_inset

 (after renormalization), to avoid having to compute it again at run-time.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula $\mathtt{halfVectorSampling.exe}$
\end_inset

 does all of this.
 When launched, it waits for command-line input specifying the desired 
\begin_inset Formula $n_{u}$
\end_inset

 and 
\begin_inset Formula $n_{v}$
\end_inset

 values, after which it performs the calculations described above and saves
 a file called 
\begin_inset Formula $\mathtt{halfVectorSampling\,[\mathit{n_{u}}\mathtt{,\mathit{n_{v}}}\mathtt{].png}}$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
It substitutes the actual 
\begin_inset Formula $n_{u}$
\end_inset

, 
\begin_inset Formula $n_{v}$
\end_inset

 values passed as input
\end_layout

\end_inset

 representing said texture in the 
\begin_inset Formula $\mathtt{textures}$
\end_inset

 folder.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Wherever 
\begin_inset Formula $\mathbf{h}$
\end_inset

-sampling is needed, it is now as easy as generating a low discrepancy sequence
\begin_inset Foot
status open

\begin_layout Plain Layout
Low discrepancy sequences tend to have faster convergence of Monte-Carlo
 integration, compared to uniformly distributed sequence, which is why they
 were preferred in this project.
 The half-vector lookup texture however works with any kind of sample sequence
 on the unit square.
\end_layout

\end_inset

 of 
\begin_inset Formula $N$
\end_inset

 points on the unit square and using their coordinates to sample the half-vector
 texture
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The low discrepancy sequences used for integration across this project are
 all Hammersley sequences.
 More information can be found here: 
\begin_inset CommandInset href
LatexCommand href
name "[Holger Dammertz: Hammersley Sequence]"
target "http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html"
literal "false"

\end_inset

.
 One thing to specify is that the first sample in a Hammersley sequence
 is always the point (0,0), which in Ashikhmin-Shirley importance sampling
 is always mapped to the vector (0,0,1) in tangent space: the 
\begin_inset Formula $\mathbf{n}$
\end_inset

 vector.
 This means in particular that setting the number of samples to 1 in the
 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

 of the rendering application always replicates the effects of a perfectly
 reflecting surface (isotropic refection with null roughness).
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Half-vector sampling visualization
\begin_inset CommandInset label
LatexCommand label
name "fig:Half-vector-sampling-visualizati"

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Downloads/desmos-graph (2).png
	width 15page%
	BoundingBox 300bp 300bp 1700bp 1700bp
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=1$
\end_inset

, 
\begin_inset Formula $n_{v}=1$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Downloads/desmos-graph.png
	width 15page%
	BoundingBox 300bp 300bp 1700bp 1700bp
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=1$
\end_inset

, 
\begin_inset Formula $n_{v}=20$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Downloads/desmos-graph (1).png
	width 15page%
	BoundingBox 300bp 300bp 1700bp 1700bp
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=20$
\end_inset

, 
\begin_inset Formula $n_{v}=1$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Downloads/desmos-graph (3).png
	width 15page%
	BoundingBox 300bp 300bp 1700bp 1700bp
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=20$
\end_inset

, 
\begin_inset Formula $n_{v}=20$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Corresponding lookup textures
\begin_inset CommandInset label
LatexCommand label
name "fig:Corresponding-lookup-textures"

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/halfVectorSampling [1,1].png
	width 15page%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=1$
\end_inset

, 
\begin_inset Formula $n_{v}=1$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/halfVectorSampling [1,20].png
	width 15page%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=1$
\end_inset

, 
\begin_inset Formula $n_{v}=20$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/halfVectorSampling [20,1].png
	width 15page%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=20$
\end_inset

, 
\begin_inset Formula $n_{v}=1$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/halfVectorSampling [20,20].png
	width 15page%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=20$
\end_inset

, 
\begin_inset Formula $n_{v}=20$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Half-vector-sampling-visualizati"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how a semi-regular sequence on the unit square (not Hammersley) is
 mapped in tangent space.
 The view is from the top, with 
\begin_inset Formula $\mathbf{n}$
\end_inset

 pointing out of the screen, 
\begin_inset Formula $\mathbf{t}$
\end_inset

 to the right and 
\begin_inset Formula $\mathbf{b}$
\end_inset

 upwards.
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Corresponding-lookup-textures"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows instead the corresponding half-vector LUT for the same values of
 
\begin_inset Formula $n_{u}$
\end_inset

 and 
\begin_inset Formula $n_{v}$
\end_inset

.
\end_layout

\begin_layout Subsubsection
BRDF integration
\begin_inset CommandInset label
LatexCommand label
name "subsec:BRDF-integration"

\end_inset


\end_layout

\begin_layout Standard
Recall from subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Ashikhmin-Shirley"
plural "false"
caps "false"
noprefix "false"

\end_inset

 that we had derived the integration-ready form of the Ashikhmin-Shirley
 bidirectional reflectance distribution function (with the Fresnel-Schlick
 approximation) as follows:
\begin_inset Formula 
\[
f_{s}(\mathbf{v},\mathbf{l})=p_{l}(\mathbf{l})\left(F_{0}\frac{1-(1-(\mathbf{vh}))^{5}}{\max((\mathbf{nv}),(\mathbf{nl}))}+\frac{(1-(\mathbf{vh}))^{5}}{\max((\mathbf{nv}),(\mathbf{nl}))}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $p_{l}(\mathbf{l})$
\end_inset

 is the probability density of the light vector 
\begin_inset Formula $\mathbf{l}$
\end_inset

, determined by view vector 
\begin_inset Formula $\mathbf{v}$
\end_inset

 and half-vector 
\begin_inset Formula $\mathbf{h}$
\end_inset

.
\end_layout

\begin_layout Standard
Recall also that the specular component of the lighting equation, for an
 arbitrary BRDF 
\begin_inset Formula $f_{s}$
\end_inset

, is:
\begin_inset Formula 
\[
L_{o}(\mathbf{v})=\int_{\mathbf{l}}f_{s}(\mathbf{v},\mathbf{l})L_{i}(\mathbf{l})(\mathbf{nl})d\omega_{\mathbf{l}}
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $L_{o}$
\end_inset

 and 
\begin_inset Formula $L_{i}$
\end_inset

 are respectively the observed and incident radiance, and the integral covers
 the upper hemisphere of the unit sphere in tangent space (where 
\begin_inset Formula $(\mathbf{nl})>0$
\end_inset

).
\end_layout

\begin_layout Standard
The split sum approximation mentioned at the beginning of section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Environment-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

 consists in evaluating this integral as the product of two simpler ones:
\begin_inset Formula 
\[
L_{o}(\mathbf{v})=\int_{\mathbf{l}}f_{s}(\mathbf{v},\mathbf{l})(\mathbf{nl})d\omega_{\mathbf{l}}\int_{\mathbf{l}}L_{i}(\mathbf{l})d\omega_{\mathbf{l}}=F(\mathbf{v})L(\mathbf{v})
\]

\end_inset


\end_layout

\begin_layout Standard
The first of these two integrals is the one this subsection focuses on,
 while the second will be the main topic of the next subsection.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Substituting the current form of the Ashikhmin-Shirley BRDF and setting
 
\begin_inset Formula $\chi(\mathbf{v},\mathbf{h})=(1-(\mathbf{vh}))^{5}$
\end_inset

we obtain:
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\[
F(\mathbf{v})=F_{0}s(\mathbf{v})+b(\mathbf{v})
\]

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
where
\begin_inset Formula 
\begin{align*}
s(\mathbf{v}) & =\int_{\mathbf{l}}p_{l}(\mathbf{l})\left(1-\chi(\mathbf{v},\mathbf{h})\right)\frac{(\mathbf{nl})}{\max((\mathbf{nv}),(\mathbf{nl}))}d\omega_{\mathbf{l}}\\
b(\mathbf{v}) & =\int_{\mathbf{l}}p_{l}(\mathbf{l})\chi(\mathbf{v},\mathbf{h})\frac{(\mathbf{nl})}{\max((\mathbf{nv}),(\mathbf{nl}))}d\omega_{\mathbf{l}}
\end{align*}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Which, performing Monte-Carlo integration with importance sampling and sample
 half-vectors 
\begin_inset Formula $\left\{ \mathbf{h_{\mathit{i}}}\right\} _{i=1}^{N}$
\end_inset

, becomes:
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align*}
s(\mathbf{v}) & \approx\sum_{i=1}^{N}\frac{(\mathbf{nl_{\mathit{i}}})\left(1-\chi(\mathbf{v},\mathbf{h_{\mathit{i}}})\right)}{\max((\mathbf{nv}),(\mathbf{nl_{\mathit{i}}}))}\\
b(\mathbf{v}) & \approx\sum_{i=1}^{N}\frac{(\mathbf{nl_{\mathit{i}}})\chi(\mathbf{v},\mathbf{h_{\mathit{i}}})}{\max((\mathbf{nv}),(\mathbf{nl_{\mathit{i}}}))}
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
having set 
\begin_inset Formula $\mathbf{l_{\mathit{i}}}=2(\mathbf{vh_{\mathit{i}}})\mathbf{h_{\mathit{i}}}-\mathbf{v}$
\end_inset

 for 
\begin_inset Formula $i=1,...,N$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The functions 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 are called, respectively, 
\begin_inset Quotes eld
\end_inset

size
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

bias
\begin_inset Quotes erd
\end_inset

, deriving their name from the role they play in calculating the BRDF integral
\begin_inset Foot
status open

\begin_layout Plain Layout
The analogy here is with the line equation 
\begin_inset Formula $f(x)=sx+b$
\end_inset

, having 
\begin_inset Formula $F_{0}$
\end_inset

 play the role of the variable
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Their values only depend on the components of 
\begin_inset Formula $\mathbf{v}$
\end_inset

 in tangent space, which allows them to be stored in a lookup texture, as
 soon as a convenient mapping of the view vectors 
\begin_inset Formula $\mathbf{v}$
\end_inset

 to the unit square is chosen.
\end_layout

\begin_layout Standard
The values of 
\begin_inset Formula $(\mathbf{nv})$
\end_inset

 and the azimuthal angle 
\begin_inset Formula $\phi$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
See 
\begin_inset CommandInset ref
LatexCommand ref
reference "fn:The-azimuthal-angle"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\end_inset

 provide all the necessary information to fully determine 
\begin_inset Formula $\mathbf{v}$
\end_inset

 in tangent space coordinates.
\end_layout

\begin_layout Standard
A convenient aspect of the Ashikhmin-Shirley BRDF is that it has rectangular
 symmetry.
 That is to say, its value doesn't change if 
\begin_inset Formula $\mathbf{t}$
\end_inset

 or 
\begin_inset Formula $\mathbf{b}$
\end_inset

 are flipped.
 This makes it possible to have 
\begin_inset Formula $\phi$
\end_inset

 range between 
\begin_inset Formula $0$
\end_inset

 and 
\begin_inset Formula $\frac{\pi}{2}$
\end_inset

 (instead of 
\begin_inset Formula $2\pi$
\end_inset

) and still retain all necessary information.
\end_layout

\begin_layout Standard
Determining the value of this 
\begin_inset Formula $\phi$
\end_inset

, corresponding to a certain 
\begin_inset Formula $\mathbf{v}$
\end_inset

, is done this way:
\begin_inset Formula 
\[
\phi(\mathbf{v})=\arctan\left|\frac{(\mathbf{bv})}{(\mathbf{tv})}\right|
\]

\end_inset


\end_layout

\begin_layout Standard
Mapping 
\begin_inset Formula $(\mathbf{nv})$
\end_inset

 straight as the 
\begin_inset Formula $v$
\end_inset

 coordinate of the texture, though, tends to mean having worse resolution
 in areas of the texture where the variations of 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 are most pronounced.
 To compensate for this effect, I have chosen to set 
\begin_inset Formula $\sqrt{(\mathbf{nv})}$
\end_inset

 as the 
\begin_inset Formula $v$
\end_inset

 coordinate of the texture.
\end_layout

\begin_layout Standard
The full mapping becomes:
\begin_inset Formula 
\begin{align*}
u(\mathbf{v}) & =\frac{2}{\pi}\arctan\left|\frac{(\mathbf{bv})}{(\mathbf{tv})}\right|\\
v(\mathbf{v}) & =\sqrt{\max\left((\mathbf{nv}),0\right)}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Where the 
\begin_inset Formula $\max$
\end_inset

 is taken to ensure 
\begin_inset Formula $\mathbf{v}$
\end_inset

 is in the upper hemisphere, which may not always be verified due to precision
 issues.
\end_layout

\begin_layout Standard
The inverse of this mapping
\begin_inset Foot
status open

\begin_layout Plain Layout
Notice that 
\begin_inset Formula $(\mathbf{nv})=\cos\theta,$
\end_inset

where 
\begin_inset Formula $\theta$
\end_inset

 is the 
\emph on
polar angle
\emph default
 of 
\begin_inset Formula $\mathbf{v}$
\end_inset

, i.e.
 the angle between 
\begin_inset Formula $\mathbf{n}$
\end_inset

 and 
\begin_inset Formula $\mathbf{v}$
\end_inset

.
 This means lets us obtain 
\begin_inset Formula $\sin\theta=\sqrt{1-(\mathbf{nv})^{2}}$
\end_inset


\end_layout

\end_inset

 (used in the program generating the texture to reconstruct the view vector
 corresponding to coordinates 
\begin_inset Formula $(u,v)$
\end_inset

) is:
\begin_inset Formula 
\begin{align*}
(\mathbf{tv}) & =\cos\left(\frac{\pi}{2}u\right)\sqrt{1-v^{4}}\\
(\mathbf{bv}) & =\sin\left(\frac{\pi}{2}u\right)\sqrt{1-v^{4}}\\
(\mathbf{nv}) & =v^{2}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The program 
\begin_inset Formula $\mathtt{brdfIntegration.exe}$
\end_inset

, when launched, waits for command-line input specifying the desired 
\begin_inset Formula $n_{u}$
\end_inset

 and 
\begin_inset Formula $n_{v}$
\end_inset

 shininess values to generate the LUT from.
 It then looks for the half-vector LUT with corresponding shininess values
 in the 
\begin_inset Formula $\mathtt{textures}$
\end_inset

 folder.
 If it doesn't find it, the program exits and the user should first launch
 
\begin_inset Formula $\mathtt{halfVectorSampling.exe}$
\end_inset

 inserting these values.
 Otherwise, the program generates a Hammersley sequence to sample half-vectors
 using the half-vector LUT.
 It then uses them to perform Monte-Carlo integration of the BRDF as detailed
 above, obtaining the values of 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 for each 
\begin_inset Formula $(u,v)$
\end_inset

 coordinate.
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Plain Layout
It eventually saves an RGB texture called 
\begin_inset Formula $\mathtt{brdfIntegration\,[\mathit{n_{u}}\mathtt{,\mathit{n_{v}}}\mathtt{].png}}$
\end_inset

 in the 
\begin_inset Formula $\mathtt{textures}$
\end_inset

 folder, storing 
\begin_inset Formula $s$
\end_inset

 in the red channel, 
\begin_inset Formula $b$
\end_inset

 in the green channel and 
\begin_inset Formula $0$
\end_inset

 in the blue one.
 The reason for using 3 channels instead of just the necessary 2 is just
 that 2-channel-texture images are saved as grey-alpha images, making it
 harder to figure out by sight how the values vary on the picture.
 
\begin_inset Formula $\mathtt{png}$
\end_inset

 compression however ensures that setting the whole blue channel to 
\begin_inset Formula $0$
\end_inset

 doesn't occupy unnecessary space.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $\linebreak{}$
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Integrated BRDF lookup textures
\begin_inset CommandInset label
LatexCommand label
name "fig:Integrated-BRDF-lookup"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/brdfIntegration [70,70].png
	width 45text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=70$
\end_inset

, 
\begin_inset Formula $n_{v}=70$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/brdfIntegration [70,20000].png
	width 45text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=70$
\end_inset

, 
\begin_inset Formula $n_{v}=20000$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/brdfIntegration [20000,70].png
	width 45text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=20000$
\end_inset

, 
\begin_inset Formula $n_{v}=70$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/brdfIntegration [20000,20000].png
	width 45text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $n_{u}=20000$
\end_inset

, 
\begin_inset Formula $n_{v}=20000$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Integrated-BRDF-lookup"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the resulting BRDF LUT for various shininess values.
 Notice how lower values (corresponding to rougher surfaces) mean darker
 textures, and thus less intense reflections.
 This is due to more sample 
\begin_inset Formula $\mathbf{l}$
\end_inset

 vectors going below the horizon .
 This is the main source of energy loss in the Ashikhmin-Shirley model.
\end_layout

\begin_layout Subsubsection
Real-Time Monte-Carlo integration of environment luminance
\end_layout

\begin_layout Standard
This is the last component to be addressed for implementing specular environment
 mapping.
 It centers around of the radiance integral obtained from the split sum
 at the beginning of the last subsection:
\begin_inset Formula 
\[
L(\mathbf{v})=\int_{\mathbf{l}}L_{i}(\mathbf{l})d\omega_{\mathbf{l}}
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $L_{i}(\mathbf{l})$
\end_inset

, the incident radiance, is the data contained in the environment cubemap.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
As explained at the beginning of section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Environment-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, this integration cannot be preprocessed when dealing with anisotropic
 illumination models.
\end_layout

\begin_layout Standard
The integration is then performed in the same way as explained in the last
 subsection, regarding the BRDF integral, but is now done in the 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

 (
\begin_inset Formula $\mathtt{env\_bump\_aniso.frag}$
\end_inset

) with the help of the preprocessed half-vector sampling.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The fragment shader generates a Hammersley sequence, samples the half-vectors
 (whose coordinates are as of now in un-bumped tangent space), bumps the
 half vectors using the bumped 
\begin_inset Formula $\mathbf{t}$
\end_inset

, 
\begin_inset Formula $\mathbf{b}$
\end_inset

, 
\begin_inset Formula $\mathbf{n}$
\end_inset

 and determines the corresponding 
\begin_inset Formula $\mathbf{l}$
\end_inset

 vectors.
\end_layout

\begin_layout Standard
These light vectors are still in tangent space, which is why they are first
 sent to world (model) space using the TBN matrix (mapping tangent space
 to world space) 
\begin_inset Formula $\mathtt{in\,mat3\,wTBNt}$
\end_inset

, which is provided by the 
\begin_inset Formula $\mathtt{vertex\,shader}$
\end_inset

 (
\begin_inset Formula $\mathtt{env\_bump\_aniso.vert}$
\end_inset

).
\end_layout

\begin_layout Standard
Their world coordinates are eventually used to sample the environment map,
 obtaining the incident light value for the corresponding direction.
\end_layout

\begin_layout Standard
These values are summed and their normalized sum plays the role of the 
\begin_inset Quotes eld
\end_inset

prefiltered specular irradiance
\begin_inset Quotes erd
\end_inset

 described in the Epic Games paper 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
All of the ingredients are now ready for obtaining the final result.
\end_layout

\begin_layout Section
Implementation Details
\begin_inset CommandInset label
LatexCommand label
name "sec:Implementation-Details"

\end_inset


\end_layout

\begin_layout Subsection
Languages and Libraries
\end_layout

\begin_layout Standard
This project is written in C++, both the main application and the preprocessing
 applications.
 Vertex and fragment shaders are all in GLSL (OpenGL Shading Language).
\end_layout

\begin_layout Standard
It includes the following libraries:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathtt{<glfw/glfw3.h>}$
\end_inset

 which manages the application window and context
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathtt{<glad/glad.h>}$
\end_inset

 which loads the OpenGL functionalities
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathtt{<utils/shader\_v1.h>}$
\end_inset

 which manages shader program compiling and linking
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathtt{<utils/model\_v2.h>}$
\end_inset

 which manages mesh import in OpenGL from 
\begin_inset Formula $\mathtt{obj}$
\end_inset

 files
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathtt{<utils/camera.h>}$
\end_inset

 which manages camera movement
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathtt{<stb\_image/stb\_image.h>}$
\end_inset

 which manages reading image files
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathtt{<glm/glm.hpp>}$
\end_inset

, 
\begin_inset Formula $\mathtt{<glm/gtc/matrix\_transform.hpp>}$
\end_inset

, 
\begin_inset Formula $\mathtt{<glm/gtc/matrix\_inverse.hpp>}$
\end_inset

 for vector calculations
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathtt{<glm/gtc/type\_ptr.hpp>}$
\end_inset

 to pass glm vectors to shaders as uniforms
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathtt{<imgui/imgui.h>}$
\end_inset

 to handle the GUI within the running application
\end_layout

\begin_layout Standard
Preprocessing programs also include 
\begin_inset Formula $\mathtt{<stb\_image/stb\_image\_write.h>}$
\end_inset

 to save texture files as images.
\end_layout

\begin_layout Subsection
File System organization for Asset import
\begin_inset CommandInset label
LatexCommand label
name "subsec:File-System-organization"

\end_inset


\end_layout

\begin_layout Standard
Preprocessing programs and the main application require assets to be stored
 in the right directories and with the correct filenames to work properly.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

project directory/
\end_layout

\begin_layout Plain Layout

	include/
\end_layout

\begin_layout Plain Layout

	libs/
\end_layout

\begin_layout Plain Layout

	models/
\end_layout

\begin_layout Plain Layout

	src/
\end_layout

\begin_layout Plain Layout

	textures/
\end_layout

\begin_layout Plain Layout

	Workspace_Organization.code-workspace
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Models in 
\begin_inset Formula $\mathtt{obj}$
\end_inset

 format should all be in the 
\begin_inset Formula $\mathtt{models}$
\end_inset

 folder.
 The 
\begin_inset Formula $\mathtt{src}$
\end_inset

 folder contains the source code and eventually the executables of the main
 application and of the preprocessing programs.
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\mathtt{textures}$
\end_inset

 folder should be organized like this:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

textures/
\end_layout

\begin_layout Plain Layout

	material_1/
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	material_n/
\end_layout

\begin_layout Plain Layout

	environment_map_1/
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	environment_map_m/
\end_layout

\begin_layout Plain Layout

	//the following are generated here by the corresponding programs
\end_layout

\begin_layout Plain Layout

	halfVectorSampling [n_u_1,n_v_1].png
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	halfVectorSampling [n_u_i,n_v_i].png
\end_layout

\begin_layout Plain Layout

	brdfIntegration [n_u_1,n_v_1].png
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	brdfIntegration [n_u_i,n_v_i].png
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\mathtt{material}$
\end_inset

 folders like this, providing all of the files shown below (the image formats
 may vary):
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

material/
\end_layout

\begin_layout Plain Layout

	albedo.jpg
\end_layout

\begin_layout Plain Layout

	ao.png
\end_layout

\begin_layout Plain Layout

	depth.png
\end_layout

\begin_layout Plain Layout

	metallic.png
\end_layout

\begin_layout Plain Layout

	normal.jpg
\end_layout

\begin_layout Plain Layout

	quaternion.png //as generated by setupRotationMapping.exe
\end_layout

\begin_layout Plain Layout

	rotation.png //as generated bt generateTangentPlaneRotation.exe
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
And finally 
\begin_inset Formula $\mathtt{environment\_map}$
\end_inset

 folders like this:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

environment_map/
\end_layout

\begin_layout Plain Layout

	environment/
\end_layout

\begin_layout Plain Layout

		//this folder is empty before running cubeMap_fromEquirectangular.exe
\end_layout

\begin_layout Plain Layout

		back.hdr
\end_layout

\begin_layout Plain Layout

		down.hdr
\end_layout

\begin_layout Plain Layout

		front.hdr
\end_layout

\begin_layout Plain Layout

		left.hdr
\end_layout

\begin_layout Plain Layout

		right.hdr
\end_layout

\begin_layout Plain Layout

		up.hdr
\end_layout

\begin_layout Plain Layout

	irradiance/
\end_layout

\begin_layout Plain Layout

		//this folder is empty before running cubeMap_fromEquirectangular.exe
\end_layout

\begin_layout Plain Layout

		back.hdr
\end_layout

\begin_layout Plain Layout

		down.hdr
\end_layout

\begin_layout Plain Layout

		front.hdr
\end_layout

\begin_layout Plain Layout

		left.hdr
\end_layout

\begin_layout Plain Layout

		right.hdr
\end_layout

\begin_layout Plain Layout

		up.hdr
\end_layout

\begin_layout Plain Layout

	equirectangular.hdr
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Compiling and using the pre-processing applications
\end_layout

\begin_layout Standard
Within the 
\begin_inset Formula $\mathtt{src}$
\end_inset

 folder in the main directory there are three folders related to preprocessing:
 
\begin_inset Formula $\mathtt{Quaternion\,Mapping}$
\end_inset

, 
\begin_inset Formula $\mathtt{Tangent\,Plane\,Rotation\,Mapping}$
\end_inset

 and 
\begin_inset Formula $\mathtt{Environment\,Preprocessing}$
\end_inset

.
 Each of these folders contains a file 
\begin_inset Formula $\mathtt{MakefileWin.bat}$
\end_inset

 with all the instructions for compiling the 
\begin_inset Formula $\mathtt{cpp}$
\end_inset

 files in that folder.
 The Build command should be launched from Visual Studio Code after having
 imported the main directory as a workspace, to ensure visibility of the
 
\begin_inset Formula $\mathtt{include}$
\end_inset

 directory.
 Include flags are all specified in the Visual Studio settings in each folder.
 The executables are built in the same folder as their source code and they
 work from that position in the file system.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Within the 
\begin_inset Formula $\mathtt{Environment\,Preprocessing}$
\end_inset

 folder, 
\begin_inset Formula $\mathtt{brdfIntegration.exe}$
\end_inset

 and 
\begin_inset Formula $\mathtt{halfVectorSampling.exe}$
\end_inset

 work as they are.
\end_layout

\begin_layout Standard
\begin_inset Formula $\mathtt{cubeMapping\_fromEquirectangular.exe}$
\end_inset

 works instead on the environment map directory specified within the source
 code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

std::string folderName = "arches/";
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To change environment map, this string should be modified before compiling.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The same applies to 
\begin_inset Formula $\mathtt{setupRotationMapping.exe}$
\end_inset

 inside the 
\begin_inset Formula $\mathtt{Quaternion\,Mapping}$
\end_inset

 folder.
 In this case, the target file (the normal map image) can be modified at
 the line:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

unsigned char *img = stbi_load("../../textures/metal_tiles/normal.jpg", &width,
 &height, &channels, STBI_rgb);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Having ensured a correct file system organization and correct target paths,
 the programs should work as intended.
\end_layout

\begin_layout Subsection
Compiling and running the rendering
\end_layout

\begin_layout Standard
The source code for the main program of this project can be found in 
\begin_inset Formula $\mathtt{/src/Main\,Application/aniso.cpp}$
\end_inset

.
 Building the source code via Visual Studio Code (the instructions are contained
 in the 
\begin_inset Formula $\mathtt{MakefileWin.bat}$
\end_inset

 file) generates the executable 
\begin_inset Formula $\mathtt{Aniso.exe}$
\end_inset

.
 When launched, it compiles and links the shaders 
\begin_inset Formula $\mathtt{env\_bump\_aniso.vert}$
\end_inset

 and 
\begin_inset Formula $\mathtt{env\_bump\_aniso.frag}$
\end_inset

, used for rendering environment-and-bump mapped models, and the shaders
 
\begin_inset Formula $\mathtt{skybox.vert}$
\end_inset

 and 
\begin_inset Formula $\mathtt{skybox.frag}$
\end_inset

, used for rendering the background.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The fixed application parameters are set at the top of the source code and
 should be modified as desired before compiling 
\begin_inset Formula $\mathtt{aniso.cpp}$
\end_inset

.
\end_layout

\begin_layout Standard
They are the directional shininess components of Ashikhmin-Shirley, 
\begin_inset Formula $n_{u}$
\end_inset

 and 
\begin_inset Formula $n_{v}$
\end_inset

, the relative path to the material directory and the relative path to the
 environment map directory.
\end_layout

\begin_layout Standard
They can be respectively set at the following lines of code:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

GLfloat nU = 20000.0f, nV = 70.0f;
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

std::string materialFolder = "hammered_metal/";
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

std::string cubeMapsFolder = "arches/";
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
If the shininess values do not correspond to values already used for generating
 the preprocessed half-vector and BRDF integration lookup textures, the
 program can't find the relevant files to import the textures and it exits.
\end_layout

\begin_layout Standard
Similarly, if the names of the material or environment map directories are
 not properly inserted, or if the folders are not organized as detailed
 in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:File-System-organization"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the textures can't be imported and the program exits.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Once the program starts, the scene is rendered and a GUI box is overlayed
 in the top-left corner.
 It contains instructions describing how to move within the scene.
\end_layout

\begin_layout Standard
Pressing the E key stops mouse and keyboard input and changes the GUI to
 two windows, of which the first allows for dynamically swapping subroutines
 affecting the rendering, such as enabling or disabling normal mapping,
 quaternion mapping etc.
\end_layout

\begin_layout Standard
The second window contains sliders to dynamically alter the value of the
 (RGB) Fresnel reflectance at normal incidence 
\begin_inset Formula $F_{0}$
\end_inset

, the height-scale for displacement mapping and the number of samples used
 in environment mapping with the Ashikhmin-Shirley model.
\end_layout

\begin_layout Standard
Pressing E again returns the application to the previous state, letting
 the user move freely within the scene once again.
\end_layout

\begin_layout Section
Results and Performance
\begin_inset CommandInset label
LatexCommand label
name "sec:Results-and-Performance"

\end_inset


\end_layout

\begin_layout Subsection
Rendered Models
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PBR bunnies
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/res_dielectric_bunny.png
	height 35theight%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
dielectric bunny
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/res_metallic_bunny.png
	height 35theight%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
metallic bunny
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PBR spheres
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/res_ceramic_sphere.png
	height 30theight%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
dielectric sphere
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/res_tiled_sphere.png
	height 30theight%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
metallic sphere
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Playing with Tangent Plane Rotation mapping
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/res_spiral_TPR.png
	height 30theight%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
spiral tangents
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/res_madness_TPR.png
	height 30theight%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
wild tangents
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Performance and Quality analysis
\end_layout

\begin_layout Standard
The final rendering works as intended, having anisotropic illumination models
 work with bump mapping, tangent plane rotation and environment mapping.
 It achieves a good level of realism, as shown in the pictures above and
 runs pretty smoothly in a real-time application.
\end_layout

\begin_layout Standard
The main factor affecting performance is definitely the residual part of
 numerical integration having to be performed in the fragment shader.
 This implies that the rendering can run pretty smoothly on models contributing
 to a limited fraction of the total fragments (i.e.
 little screen space), even with a high number of samples (in the order
 of the hundreds).
 Conversely, due to how the code is implemented (the number of samples is
 passed as a uniform to the fragment shader), for models occupying more
 screen space the number of samples can be dynamically adjusted to avoid
 an excessive load on the GPU.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
On a computer running on a NVidia Geforce 770 GTX with 2GB of RAM on a fullscree
n 1080p display, the frame rate remains capped at 60 FPS while rendering
 (with 200 samples) a model in the middle of the screen covering roughly
 an eighth of the total screen space.
 In the extreme case of an object covering the whole screen, the frame rate
 is roughly inversely proportional to the number of samples, going from
 
\begin_inset Formula $\sim60$
\end_inset

 FPS at 60 sample-count to 
\begin_inset Formula $\sim20$
\end_inset

 FPS at 200 sample-count.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
In most cases however the screen occupancy of an object to which one would
 want to apply anisotropic shading is much more limited.
 At the same time, in most use-cases the number of samples can be capped
 well below 100 and still achieve perfectly acceptable results.
 This is all the more true for shinier surfaces: sampled vectors tend to
 be closer together and a smaller number of them is needed to obtain similar
 results to a much higher sample count.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "LearnOpenGL"
key "key-1"
literal "false"

\end_inset

learnopengl.com by Joey de Vries
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Karis13"
key "key-2"
literal "false"

\end_inset

Brian Karis, Real Shading in Unreal Engine 4, Epic Games, 2013
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "AsSh00"
key "key-3"
literal "false"

\end_inset

Michael Ashikhmin and Peter Shirley.
 An Anisotropic Phong Light Reflection Model.
 University of Utah, 2000
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "HeSe98"
key "key-4"
literal "false"

\end_inset

Wolfgang Heidrich and Hans-Peter Seidel.
 Efficient Rendering of Anisotropic Surfaces Using Computer Graphics Hardware.
 University of Erlangen, 1998
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Ward92"
key "key-5"
literal "false"

\end_inset

Gregory J.
 Ward.
 Measuring and modeling anisotropic reflection.
 Computer Graphics, 26(4):265–272, July 1992.
 ACM Siggraph ’92 Conference Proceedings.
\end_layout

\end_body
\end_document
