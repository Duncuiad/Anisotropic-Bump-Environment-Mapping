#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Bumped Environment Mapping for Anisotropic Shaders
\end_layout

\begin_layout Author
Federico Marcolongo, 940085
\end_layout

\begin_layout Abstract
Anisotropic shaders need information about the whole tangent space orientation
 to render illumination models, as opposed to their isotropic counterpart,
 which only needs information concerning the normal direction to the rendered
 surface.
 This implies new challenges to address in the implementation of a real-time
 application, as well as many possibilities to render effects isotropic
 shaders couldn't describe.
 Keeping in mind the requirements a real-time rendering process needs to
 run smoothly, I try to make the best use of the aforementioned possibilities
 while maintaining accetpable performance.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Goal of the project
\end_layout

\begin_layout Subsection
Notation
\end_layout

\begin_layout Section
Quick Overview of Anisotropic Illumination Models
\end_layout

\begin_layout Subsection
Anisotropic Shading as opposed to Isotropic Shading
\end_layout

\begin_layout Standard
The Bidirectional Radiance Distribution Function (BRDF) is, in the phisical
 description of the illumination of surfaces, the function describing how
 a particular material emits back the light it receives from the environment.
 The graph of this function is 4-dimensional, as its domain and codomain
 are both bidimensional hemispheres.
 The description of such a function for any possible kind of actual physical
 material is a very complex task, which is why many different models have
 been proposed in computer graphics to strike a balance between physical
 accuracy and computational complexity, all the more so in the case of real-time
 graphics processing.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The two realms of illumination models I mean to discuss, as per the title
 of this subsection, derive their differences precisely from the intention
 of describing real life materials.
 In particular, they make different assumptions concerning the overall orientati
on of microscopical imperfections on the surface of these different kinds
 of material.
 Where isotropic models mean to describe surfaces whose imperfections have
 radial symmetry (given also their abundance in nature), their anisotropic
 counterpart concerns itself with the description of surfaces where these
 imperfections are aligned along a particular direction than another.
 This is the case, for example, in the natural occurrences of brushed metal,
 hair, vynil records and CDs (whose grooves have a concentrical orientation),
 and surfaces varnished with a stroke of coating.
\end_layout

\begin_layout Standard
Given the dependence of the re-emitted light on the orientation of these
 imperfections, an anisotropic illumination model needs to account for the
 orientation of the tangent plane to the surface (the direction of its tangent
 and bitangent vectors, as described in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Tangent-Space"
plural "false"
caps "false"
noprefix "false"

\end_inset

), and not just for the relative position of the view- (or incident light-)
 vector to the surface normal vector - which is the case for most isotropic
 models.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Below are presented a few models addressing the issue of anisotropic surfaces.
 Since the models are fairly old (in terms of computer graphics development
 history) we have to keep in mind that the simplest (and least physically
 accurate) of them, the Heidrich-Seidel 
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"
literal "false"

\end_inset

 model was developed for real time applications running on 1990s GPUs, and
 consequently concentrates on having the fastest implementation possible,
 while the Ward 
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"
literal "false"

\end_inset

 and Ashikhmin-Shirley 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"
literal "false"

\end_inset

 models where developed with (offline) ray-tracing applications in mind.
 The fast development of GPU processing power during the last two decades
 is what allows me, in this particular instance, to use these models for
 demanding tasks, even on real-time applications.
 This project will be mainly focused on the Ashikhmin-Shirley model, for
 reasons that will be discussed later in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Why-Ashikhmin-Shirley?"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Subsection
Heidrich-Seidel
\end_layout

\begin_layout Standard
This Phong-like model from 1998 means to describe anisotropic surfaces as
 (2D) bundles of one-dimensional strands (curves in 3D space) each having
 a tangent vector in each of its points.
 Given a point on a surface, it uses this tangent 
\begin_inset Formula $T$
\end_inset

 and the light-incidence direction 
\begin_inset Formula $L$
\end_inset

 to calculate a 
\begin_inset Quotes eld
\end_inset

shading normal vector
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $N'$
\end_inset

 which corresponds to the normal vector used for rendering one-dimensional
 strands.
 This vector is obtained implicitly as 
\begin_inset Formula 
\[
\left\langle L,N'\right\rangle =\sqrt{1-\left\langle L,T\right\rangle ^{2}}
\]

\end_inset

which represents the diffuse component of the model.
 Here and below, following the authors' notation, 
\begin_inset Formula $\left\langle V,W\right\rangle $
\end_inset

 represents the dot product of vectors 
\begin_inset Formula $V$
\end_inset

 and 
\begin_inset Formula $W$
\end_inset

.
 Similarly, the dot product of the view vector 
\begin_inset Formula $V$
\end_inset

 and the reflected light vector 
\begin_inset Formula $R$
\end_inset

 (against 
\begin_inset Formula $N'$
\end_inset

 instead of the surface normal 
\begin_inset Formula $N$
\end_inset

) is found to be 
\begin_inset Formula 
\[
\left\langle V,R\right\rangle =\sqrt{1-\left\langle L,T\right\rangle ^{2}}\sqrt{1-\left\langle V,T\right\rangle ^{2}}-\left\langle L,T\right\rangle \left\langle V,T\right\rangle 
\]

\end_inset

These values are then insterted in a Phong-like (-direct-light) equation
 representing the model:
\begin_inset Formula 
\[
I_{o}=k_{a}I_{a}+\left(k_{d}\left\langle L,N'\right\rangle +k_{s}\left\langle V,R\right\rangle ^{n}\right)I_{i}
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $k_{a}$
\end_inset

, 
\begin_inset Formula $k_{d}$
\end_inset

, 
\begin_inset Formula $k_{s}$
\end_inset

 are respectively the ambient, diffuse and specular coefficients
\end_layout

\begin_layout Itemize
\begin_inset Formula $I_{o}$
\end_inset

, 
\begin_inset Formula $I_{a}$
\end_inset

, 
\begin_inset Formula $I_{i}$
\end_inset

 are respectively the observed, ambient and incident light intensities
\end_layout

\begin_layout Itemize
\begin_inset Formula $n$
\end_inset

 is the Phong shininess coefficient
\end_layout

\begin_layout Standard
This model is clearly not bidirectional, it doesn't account for surface
 roughness, and doesn't conserve radiant energy, just like the (isotropic)
 Phong illumination model it is based on.
 Despite this, the authors describe a method to pre-process lookup textures
 storing the values of the square root-terms involved in the calculations,
 achieving the goal of the paper in terms of assuring a fast real-time rendering
 of anisotropic properties.
\end_layout

\begin_layout Subsection
Ward
\end_layout

\begin_layout Standard
This hybrid empirical- and theoretical- model by Ward means to offer a physics-b
ased, energy conserving, fully bidirectional anisotropic BRDF along with
 an explicit method for importance sampling of the halfway vectors 
\begin_inset Formula $\mathrm{\mathbf{h}}$
\end_inset

, for BRDF integration purposes.
\end_layout

\begin_layout Standard
It is parameterized by diffuse and specular coefficients
\begin_inset Formula $\rho_{d}$
\end_inset

 and 
\begin_inset Formula $\rho_{s}$
\end_inset

 and directional roughness coefficients 
\begin_inset Formula $\alpha_{x}$
\end_inset

 (along the tangent direction) and 
\begin_inset Formula $\alpha_{y}$
\end_inset

 (along the bitangent direction), all of which have a physical interpretation
 and can be used to fit empirical data obtained from sampling the BRDF of
 actual materials in a lab setting.
\end_layout

\begin_layout Standard
The model's BRDF is then built around a Gaussian distribution function with
 elliptical simmetry:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(\mathbf{v},\mathbf{l})=\frac{\rho_{d}}{\pi}+\rho_{s}\frac{1}{\sqrt{(\mathrm{\mathbf{nv}})(\mathbf{\mathrm{\mathbf{nl}}})}}\frac{1}{4\pi\alpha_{x}\alpha_{y}}e^{-2\frac{\left(\frac{(\mathbf{\mathrm{\mathbf{th}}})}{\alpha_{x}}\right)^{2}+\left(\frac{(\mathbf{\mathrm{\mathbf{bh}}})}{\alpha_{y}}\right)^{2}}{1+(\mathrm{\mathbf{nh}})}}
\]

\end_inset


\end_layout

\begin_layout Standard
Although the lighting model is solidly grounded on empirical data and a
 widely accepted distribution for microsurface orientation, it intentionally
 lacks geometry visibility and Fresnel reflectance terms.
 This is what most significantly separates it from the class of 
\begin_inset Quotes eld
\end_inset

modern
\begin_inset Quotes erd
\end_inset

 PBR (phisically-based rendering) shaders.
\end_layout

\begin_layout Standard
For the purposes of this project, it should also be noted that the Ward
 model, although it is endowed with an importance sampling method for the
 generation of the half-vectors 
\begin_inset Formula $h$
\end_inset

, doesn't offer an explicit distribution function for the said vectors,
 which would be useful in a Monte-Carlo setting (as pointed in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-2"
literal "false"

\end_inset

).
\end_layout

\begin_layout Subsection
Ashikhmin-Shirley
\end_layout

\begin_layout Standard
This mostly theoretical Phong-based model proposes a bidirectional, energy
 conserving, Fresnel-reflectance weighted anisotropic specular BRDF.
 It also proposes an energy conserving diffuse term to use along the specular
 model, instead of a lambertian one.
 This diffuse term won't however be the focus of this project.
\end_layout

\begin_layout Standard
The specular BRDF is parameterized by two directional shininess coefficients
 
\begin_inset Formula $n_{u}$
\end_inset

 and 
\begin_inset Formula $n_{v}$
\end_inset

, which split the role of the Phong shininess coefficient 
\begin_inset Formula $n$
\end_inset

 in the tangent and bitangent directions.
\end_layout

\begin_layout Standard
The model crucially provides both an importance sampling generation process
 for half-vectors and their explicit distribution function.
 Since integration of the BRDF is done not in the space of half-vectors
 but in the space of incident light vectors, the authors provide the explicit
 relation between the distribution functions of the vectors in the two spaces
 mentioned above: 
\begin_inset Formula $p_{h}(\mathbf{h})=4(\mathbf{vh})p_{l}(\mathbf{l})$
\end_inset

 for 
\begin_inset Formula $\mathbf{l}=2(\mathbf{vh})\mathbf{h}-\mathbf{v}$
\end_inset

 (
\begin_inset Formula $\mathbf{h}$
\end_inset

 is the half-vector of vectors 
\begin_inset Formula $\mathbf{v}$
\end_inset

 and 
\begin_inset Formula $\mathbf{l}$
\end_inset

).
\end_layout

\begin_layout Standard
The authors describe:
\begin_inset Formula 
\[
p_{h}(\mathbf{h})=\frac{\sqrt{(n_{u}+1)(n_{v}+1)}}{2\pi}(\mathbf{nh})^{\frac{n_{u}(\mathbf{th})^{2}+n_{v}(\mathbf{bh})^{2}}{1-(\mathbf{nh})^{2}}}
\]

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Ashikhmin-Shirley-h-distribution"

\end_inset


\end_layout

\begin_layout Standard
And obtain the full specular BRDF as:
\begin_inset Formula 
\[
f_{s}(\mathbf{v},\mathbf{l})=\frac{p_{h}(\mathbf{h})F((\mathbf{vh}))}{4(\mathbf{vh})\max((\mathbf{nv}),(\mathbf{nl}))}
\]

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Ashikhmin-Shirley-specular-BRDF"

\end_inset


\end_layout

\begin_layout Standard
In the original paper as well as for the purposes of this project, the Fresnel
 reflectance term is estimated making use of the Schlick approximation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F((\mathbf{vh}))=F_{0}+(1-F_{0})(1-(\mathbf{vh}))^{5}=F_{0}(1-(1-(\mathbf{vh}))^{5})+(1-(\mathbf{vh}))^{5}
\]

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fresnel-reflectance-Schlick"

\end_inset


\end_layout

\begin_layout Standard
Anticipating the discussion contained in subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Pre-processing"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the final form of the Ashikhmin-Shirley (specular) BRDF, ready for Monte-Carlo
 integration with importance sampling, is:
\begin_inset Formula 
\[
f_{s}(\mathbf{v},\mathbf{l})=p_{l}(\mathbf{l})\left(F_{0}\frac{1-(1-(\mathbf{vh}))^{5}}{\max((\mathbf{nv}),(\mathbf{nl}))}+\frac{(1-(\mathbf{vh}))^{5}}{\max((\mathbf{nv}),(\mathbf{nl}))}\right)
\]

\end_inset


\end_layout

\begin_layout Section
Bump Mapping
\begin_inset CommandInset label
LatexCommand label
name "sec:Bump-Mapping"

\end_inset


\end_layout

\begin_layout Subsection
From vertex-level to fragment-level detail
\end_layout

\begin_layout Standard
It is common in computer graphics to want to obtain a certain level of detail
 on the rendered surface without having to indeterminately increase the
 resolution of the underlying mesh.
 This is most common in the texturing of a 3D model: the values of the color
 attribute attribute are removed from the vertices and given to a proxy,
 which in the case of UV-mapping (a common technique addressing the issue)
 is an image whose pixels (named texels) are accessed by their coordinates.
 The vertices then store their (u,v) position on such image and rasterization
 takes care of interpolating the attribute over the faces of the mesh.
\end_layout

\begin_layout Standard
The most important aspect of this process, for the goal of this project,
 is that not only can UV-mapping manage a fragment-level description of
 color, but a fragment-level description of vectors as well.
 The x, y, z components of a 3D vector are mapped respectively to the R,
 G, B channels of the texture image (which range between 0 and 
\begin_inset Formula $2^{i}-1$
\end_inset

, where 
\begin_inset Formula $i$
\end_inset

 is the bit depth of the image).
\end_layout

\begin_layout Standard
To maintain decent resolution in the mapping of vectors, this process works
 best for vector 
\begin_inset Quotes eld
\end_inset

fields
\begin_inset Quotes erd
\end_inset

 whose components are uniformly bounded by 
\begin_inset Quotes eld
\end_inset

small
\begin_inset Quotes erd
\end_inset

 constants, which is fortunately the case for the objects closest to our
 needs when implementing illumination models: unit vectors in 3D space.
 Their components all range, in fact, between -1 and 1.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
UV-mapping is what provides fragment-level precision (albeit with fixed
 resolution) to all of the calculations we are tasked to perform when implementi
ng illumination models.
 It is a very powerful instrument in real-time rendering, and one whose
 preservation is the main driving factor behind many of the (hardest) implementa
tion choices when treating Environment Mapping in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Environment-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Tangent Space
\begin_inset CommandInset label
LatexCommand label
name "subsec:Tangent-Space"

\end_inset


\end_layout

\begin_layout Standard
Since when mapping vectors to textures we are not actually mapping directly
 vector objects, but their components with respect to a certain frame of
 reference, we want this reference to be the most neutral space we can achieve.
 The meaning of this is that not only it shouldn't depend on model and view
 transformations, but it shouldn't depend on the coordinates of vertices
 in object space either.
 This is the reason why we express UV-mapped vectors in tangent space, which
 we define, per vertex, as the span of the plane 
\emph on
tangent
\emph default
 to the mesh in the vertex (which has a precise geometrical meaning) and
 the direction 
\emph on
normal
\emph default
 to the mesh in that same vertex (with the convention of taking it 
\emph on
outwards-pointing
\emph default
 in the case of a 2-manifold closed mesh)
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Thus, to find the vectors which form a basis of this tangent space, we must
 explain both how to find the 
\emph on
normal
\emph default
 
\begin_inset Formula $\mathbf{n}$
\end_inset

 vector and the 
\emph on
tangent
\emph default
 
\begin_inset Formula $\mathbf{t}$
\end_inset

 and 
\emph on
bitangent
\emph default
 
\begin_inset Formula $\mathbf{b}$
\end_inset

 vectors that form the basis of the tangent plane, to obtain an actual 
\begin_inset Formula $(\mathbf{t},\mathbf{b},\mathbf{n})$
\end_inset

 orthonormal frame of reference for the UV-mapped vectors.
\end_layout

\begin_layout Standard
Finding the 
\begin_inset Formula $\mathbf{n}$
\end_inset

 vector in a certain vertex V is usually achieved in computer graphics by
 averaging (with according weights) the 
\emph on
face normals
\emph default
 of all the faces sharing V, which themselves are easily computed through
 linear operations involving the vertices adjacent to V on each face.
\end_layout

\begin_layout Standard
Computing 
\begin_inset Formula $\mathbf{t}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b}$
\end_inset

 is, instead, where UV-mapping comes into play.
 This is because UV-mapping is the closest thing there is, in computer graphics,
 to explicitly determining a chart of the 2-manifold embedded in 3D space
 represented by the mesh.
 The process goes like this: the texture image is itself a 2D linear space,
 whose tangent space (in each texel) is the span of two orthogonal vectors
 
\begin_inset Formula $\mathbf{u}$
\end_inset

 and 
\begin_inset Formula $\mathbf{v}$
\end_inset

, respectively aligned along the 
\emph on
u
\emph default
 and 
\emph on
v
\emph default
 axis of the texture.
 Two vectors 
\begin_inset Formula $\mathbf{t'}$
\end_inset

, 
\begin_inset Formula $\mathbf{b'}$
\end_inset

 are constructed on V so that their UV-mapping (mathematically, the 
\emph on
differential
\emph default
 of the mapping) are resp.
 
\begin_inset Formula $\mathbf{u}$
\end_inset

 and 
\begin_inset Formula $\mathbf{v}$
\end_inset

.
 The issue with taking directly 
\begin_inset Formula $\mathbf{t}=\mathbf{t'}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b}=\mathbf{b'}$
\end_inset

 is that 
\begin_inset Formula $\mathbf{t'}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b'}$
\end_inset

are only orthogonal if the UV-mapping is conformal (i.
 e.
 it preserves angles) and even so, they are unit vectors only if the mapping
 is an isometry (i.
 e.
 it preserves distances), which it rarely is.
\end_layout

\begin_layout Standard
To obtain the orthonormal frame of reference mentioned above, 
\begin_inset Formula $(\mathbf{t'},\mathbf{b'},\mathbf{n})$
\end_inset

 is orthonormalized via the Gram-Schmidt process, setting 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
 & \mathbf{t}=\frac{\mathbf{t'}-(\mathbf{nt'})\mathbf{n}}{\left\Vert \mathbf{t'}-(\mathbf{nt'})\mathbf{n}\right\Vert }\\
 & \mathbf{b}=\mathbf{n\times\mathbf{t}}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
where the order of the cross product means the frame of reference will have
 positive orientation.
 Notice that, since the setting is 3-dimensional, we didn't actually have
 to determine 
\begin_inset Formula $\mathbf{b'}$
\end_inset

 for this purpose, but computer graphics usually compute it for completeness.
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $(\mathbf{t},\mathbf{b},\mathbf{n})$
\end_inset

 frame of reference obtained this way completely describes the space where
 both the UV-mapping of vectors and lighting calculations will be made in
 the implementation of this project.
 The fact that this reference frame is orthonormal grants that the transformatio
n from tangent space to object space is an orthogonal linear transformation,
 and as such preserves distances (hence dot products).
 In particular, this transformation is represented by the 3x3 matrix having
 the reference frame vectors as columns.
\end_layout

\begin_layout Subsection
Normal Mapping
\end_layout

\begin_layout Standard
Having set the context in which we can use textures to store values of vectors
 varying on the surface to be rendered, it is now time to mention the most
 widely used and readily available kind of vector mapping: Normal Maps.
\end_layout

\begin_layout Standard
The idea behind this method is that we can mimic the appearance of bumps
 and indentations over the surface without the need for tessellating and
 displacing elements of the mesh, achieving the goal instead by perturbing
 the surface normals at a fragment level.
\end_layout

\begin_layout Standard
The image value of the normal vector is store directly at coordinates (u,v)
 of the lookup texture, making the implementation of the mapping a straight
 texture read performed in the 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

.
\end_layout

\begin_layout Standard
The value of the normal at each point is then used to perform lighting calculati
ons againts view and light vectors (in this implementation, all of them
 are first mapped to tangent space).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Normal Maps
\begin_inset CommandInset label
LatexCommand label
name "fig:Normal-Mapping"

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/noNormMap.png
	width 20page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
no normal mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/withNormMap.png
	width 20page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
with normal mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename textures/hammered_metal/normal.jpg
	width 20page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
the normal map texture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Normal-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows (isotropic) environment mapping with and without normal mapping,
 as well as the texture used to achieve the effect.
 Notice the bluish tint of the texture: normal maps describe 
\begin_inset Quotes eld
\end_inset

small
\begin_inset Quotes erd
\end_inset

 perturbations about the mesh normal, so each texel stores a vector value
 that in tangent space is 
\begin_inset Quotes eld
\end_inset

close
\begin_inset Quotes erd
\end_inset

 to the tangent space's 
\begin_inset Formula $\mathbf{n}=(0,0,1)^{\top}$
\end_inset

 normal vector (corresponding to a fully blue RGB triplet
\begin_inset Foot
status open

\begin_layout Plain Layout
Actually, 
\begin_inset Formula $(x,y,z)$
\end_inset

 vectors are mapped to 
\begin_inset Formula $(r,g,b)=\frac{1}{2}(x,y,z)+\frac{1}{2}$
\end_inset

, which means that the up vector in tangent space corresponds to a lighter
 
\begin_inset Formula $(0.5,0.5,1)$
\end_inset

 blue on the texture
\end_layout

\end_inset

).
\end_layout

\begin_layout Subsection
Quaternion Mapping
\begin_inset CommandInset label
LatexCommand label
name "subsec:Quaternion-Mapping"

\end_inset


\end_layout

\begin_layout Standard
Normal maps are enough in all of the cases where information about the normal
 vector alone is sufficient to perform lighting calculations.
 But if we were to apply normal maps as is, when implementing, for example,
 anisotropic shaders, the perturbed normals would reflect bumps over the
 surface, while tangents and bitangents would still be interpolated from
 the mesh's own vectors.
\end_layout

\begin_layout Standard
In a technical sense, the tangent space basis vectors could not be guaranteed
 to be orthonormal, and as such couldn't hope to describe an actual reference
 frame.
\end_layout

\begin_layout Standard
This issue, when left unattended, gives birth to weird lighting effects
 and has to be addressed when bump mapping with anisotropic shaders: not
 only should normals be perturbed, but the perturbation should involve the
 whole tangent space in the same way.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
One way of solving the issue (on the programmer's part) would be to ask
 artists authoring PBR materials to provide a tangent- and bitangent-map
 textures for anisotropic materials, then sampling them just like normal
 maps to obtain the perturbed versions of the corresponding vectors.
\end_layout

\begin_layout Standard
Such method would however amount to both unnecessary work on the artist's
 part and a threefold increase in memory occupation on the GPU.
\end_layout

\begin_layout Standard
A different approach I think better suits the problem is to consider the
 normal map authored by PBR artists not as the bump mapping itself, but
 as where the normals end up after a tangent-space-wide change of reference
 frame.
 This amounts to finding, for each 
\begin_inset Formula $(u,v)$
\end_inset

 coordinate, that particular linear transformation
\begin_inset Foot
status open

\begin_layout Plain Layout
This transformation maps the 
\begin_inset Formula $(\mathbf{t},\mathbf{b},\mathbf{n})$
\end_inset

 orthonormal basis to a perturbed orthonormal basis 
\begin_inset Formula $(\mathbf{t'},\mathbf{b'},\mathbf{n'})$
\end_inset

, preserving orientation.
 By definition, this transformation is a 
\emph on
rotation
\end_layout

\end_inset

 which, following the shortest path, maps the 
\begin_inset Formula $\mathbf{n}$
\end_inset

 tangent space vector to the 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\mathbf{n'}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
 value stored in the normal map texture.
\end_layout

\begin_layout Standard
This is a rotation from 
\begin_inset Formula $\mathbf{n}$
\end_inset

 to 
\begin_inset Formula $\mathbf{n'}$
\end_inset

, whose axis is perpendicular to both vectors, and as such surely lies in
 the tangent plane
\begin_inset Foot
status open

\begin_layout Plain Layout
Which is the subspace of vectors orthogonal to 
\begin_inset Formula $\mathbf{n}$
\end_inset


\end_layout

\end_inset

.
 Linear transformations are usually represented, in computer graphics, by
 their representation matrix with respect to known vector bases.
 Constructing and storing such a 3x3 matrix would however incur into issues
 similar to those discussed above, namely memory occupation.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
The hunt for a solution to this problem brings us to the title of this subsectio
n: it is a well known fact that unit quaternions represent rotations of
 the 3-dimensional space.
 In particular, to each (unit) quaternion 
\begin_inset Formula $\mathbf{q}=a+b\mathbf{i}+c\mathbf{j}+d\mathbf{k}$
\end_inset

 is associated a unique rotation 
\begin_inset Formula $r_{\mathbf{q}}$
\end_inset

 (with the caveat that opposite quaternions represent the same rotation,
 i.e.
 
\begin_inset Formula $r_{\mathbf{q}}=r_{-\mathbf{q}}$
\end_inset

), which acts on a 3D vector 
\begin_inset Formula $\mathbf{v}=x\mathbf{i}+y\mathbf{j}+z\mathbf{k}$
\end_inset

 in the following way:
\begin_inset Formula 
\begin{align*}
r_{\mathbf{q}}(\mathbf{v}) & =\mathbf{q\mathbf{^{-1}v}q}\\
 & =\mathbf{\bar{q}\mathbf{v}q}\\
 & =(a-b\mathbf{i}-c\mathbf{j}-d\mathbf{k})(x\mathbf{i}+y\mathbf{j}+z\mathbf{k})(a+b\mathbf{i}+c\mathbf{j}+d\mathbf{k})
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Where all of the products are quaternion products, which incidentally distribute
 over the sum.
\end_layout

\begin_layout Standard
Furthermore, the quaternion representing a rotation of axis 
\begin_inset Formula $\mathbf{l}=r\mathbf{i}+s\mathbf{j}+t\mathbf{k}$
\end_inset

 (
\begin_inset Formula $\mathbf{l}$
\end_inset

 being a unit vector) and angle 
\begin_inset Formula $\alpha$
\end_inset

 can be calculated as:
\begin_inset Formula 
\[
\mathbf{q_{l,\alpha}=\cos\left(\frac{\alpha}{\mathrm{2}}\right)}+\sin\left(\frac{\alpha}{\mathrm{2}}\right)(r\mathbf{i}+s\mathbf{j}+t\mathbf{k})=a+b\mathbf{i}+c\mathbf{j}+d\mathbf{k}
\]

\end_inset


\end_layout

\begin_layout Standard
In the setting discussed above, the fact that the tangent space rotation
 has axis lying in the tangent plane
\begin_inset Foot
status open

\begin_layout Plain Layout
i.e.
 
\begin_inset Formula $t=0$
\end_inset


\end_layout

\end_inset

 translates directly to its representing quaternion having 
\begin_inset Formula $d=t\sin\left(\frac{\alpha}{\mathrm{2}}\right)$
\end_inset

 component equal to 0.
\end_layout

\begin_layout Standard
We then search for one of the two unit quaternions satisfying:
\begin_inset Formula 
\begin{align*}
\mathbf{n'} & =\mathbf{\bar{q}}\mathbf{n}\mathbf{q}\\
x\mathbf{i}+y\mathbf{j}+z\mathbf{k} & =(a-b\mathbf{i}-c\mathbf{j})(0\mathbf{i}+0\mathbf{j}+1\mathbf{k})(a+b\mathbf{i}+c\mathbf{j})\\
x\mathbf{i}+y\mathbf{j}+z\mathbf{k} & =(a-b\mathbf{i}-c\mathbf{j})(a\mathbf{k}+b\mathbf{j}-c\mathbf{i})\\
x\mathbf{i}+y\mathbf{j}+z\mathbf{k} & =-2ac\mathbf{i}+2ab\mathbf{j}+(a^{2}-b^{2}-c^{2})\mathbf{k}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Which amounts to solving, for parameters 
\begin_inset Formula $a$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $c$
\end_inset

, the nonlinear system:
\begin_inset Formula 
\[
\begin{cases}
ac & =-\frac{x}{2}\\
ab & =\frac{y}{2}\\
a^{2}-b^{2}-c^{2} & =z\\
a^{2}+b^{2}+c^{2} & =1
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
This gives, choosing 
\begin_inset Formula $a\geq0$
\end_inset

 (for 
\begin_inset Formula $a\leq0$
\end_inset

 we obtain the opposite quaternion, representing the same rotation):
\begin_inset Formula 
\[
\begin{cases}
a & =\sqrt{\frac{z+1}{2}}\\
b & =\sqrt{\frac{y^{2}}{2(z+1)}}\\
c & =\sqrt{\frac{x^{2}}{2(z+1)}}
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
Notice that in the implementation, once the value of 
\begin_inset Formula $a$
\end_inset

 has been computed, the other two parameters can be obtained as 
\begin_inset Formula $b=\frac{y}{2a}$
\end_inset

 and 
\begin_inset Formula $c=-\frac{x}{2a}$
\end_inset

, simplifying calculations.
\end_layout

\begin_layout Standard
Having no need to store a 
\begin_inset Formula $d$
\end_inset

 value, it is possible to store the vector 
\begin_inset Formula $(a,b,c)$
\end_inset

 in a texture, just like a normal map and most importantly with exactly
 the same impact on memory, but with information ready to compute the whole
 perturbed tangent space.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
This quaternion texture can and therefore should be precomputed, which,
 in the implementation of this project, is what the 
\begin_inset Formula $\mathtt{setupRotationMapping.exe}$
\end_inset

 executable was designed for.
\end_layout

\begin_layout Plain Layout
It takes a normal map as input, it performs the calculations described above,
 and it returns a texture of the same width and height of the input image,
 storing the quaternion map.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
Subsequently, at the 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

 stage of rendering a model, the texture is read and its values are used
 to compute the perturbed 
\begin_inset Formula $\mathbf{t'}$
\end_inset

, 
\begin_inset Formula $\mathbf{b'}$
\end_inset

 and 
\begin_inset Formula $\mathbf{n'}$
\end_inset

 vectors, by having 
\begin_inset Formula $\mathbf{q}=a+b\mathbf{i}+c\mathbf{j}$
\end_inset

 act on the tangent space basis vectors:
\begin_inset Formula 
\begin{align*}
\mathbf{t'} & =\mathbf{\bar{q}\mathbf{t}q} & =(a-b\mathbf{i}-c\mathbf{j})\mathbf{i}(a+b\mathbf{i}+c\mathbf{j}) & =(a^{2}+b^{2}-c^{2},2bc,2ac)\\
\mathbf{b'} & =\mathbf{\bar{q}\mathbf{b}q} & =(a-b\mathbf{i}-c\mathbf{j})\mathbf{j}(a+b\mathbf{i}+c\mathbf{j}) & =(2bc,a^{2}-b^{2}+c^{2},2ab)\\
\mathbf{n'} & =\mathbf{\bar{q}\mathbf{n}q} & =(a-b\mathbf{i}-c\mathbf{j})\mathbf{k}(a+b\mathbf{i}+c\mathbf{j}) & =(-2ac,2ab,a^{2}-b^{2}-c^{2})
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Quaternion mapping overall achieves the goal of uniformly perturbing the
 tangent space, with minimal calculations to be performed in the fragment
 shader, while having the same impact on memory as usual normal mapping
 (the normal map itself is not needed anymore, as the perturbed normal can
 be calculated from the quaternion map, just like the other vectors).
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement !th
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Quaternion Maps
\begin_inset CommandInset label
LatexCommand label
name "fig:Quaternion-Mapping"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/onlyNormalQuat.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
only normal mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/onlyTangentQuat.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
only tangent and bitangent mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/withQuat.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
full quaternion mapping
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename textures/hammered_metal/quaternion.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
the quaternion map obtained from the normal map in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Normal-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:the-quaternion-map"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As shown in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Quaternion-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, full tangent space perturbation is needed to properly model anisotropic
 reflections, all the more so near parts of the surface where the perturbation
 achieved by bump mapping is more pronounced (in this particular case, near
 the edges of the bumps).
\end_layout

\begin_layout Standard
The reddish tint of figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:the-quaternion-map"
plural "false"
caps "false"
noprefix "false"

\end_inset

 underlines how mapped quaternions are 
\begin_inset Quotes eld
\end_inset

small
\begin_inset Quotes erd
\end_inset

 perturbations of the identity quaternion 
\begin_inset Formula $1+0\mathbf{i}+0\mathbf{j}+0\mathbf{k}$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Which is mapped to the RGB triplet 
\begin_inset Formula $\left(1,\frac{1}{2},\frac{1}{2}\right)$
\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Tangent Plane Rotation (TPR) Mapping
\begin_inset CommandInset label
LatexCommand label
name "subsec:Tangent-Plane-Rotation"

\end_inset


\end_layout

\begin_layout Standard
In subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Quaternion-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, a choice was made of the particular rotation mapping 
\begin_inset Formula $\mathbf{n}$
\end_inset

 to 
\begin_inset Formula $\mathbf{n'}$
\end_inset

, selecting the 
\begin_inset Quotes eld
\end_inset

shortest
\begin_inset Quotes erd
\end_inset

 rotation, i.e.
 the one with axis perpendicular to both 
\begin_inset Formula $\mathbf{n}$
\end_inset

 and 
\begin_inset Formula $\mathbf{n'}$
\end_inset

, among all of the possible rotations achieving the same result.
\end_layout

\begin_layout Standard
In fact, this class of rotations can be characterized as the collection
 of all rotations of the kind 
\begin_inset Formula $r=\bar{r}\circ r^{\top}$
\end_inset

, where 
\begin_inset Formula $\bar{r}$
\end_inset

 is the rotation mentioned above, as selected in subsection
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Quaternion-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, and 
\begin_inset Formula $r^{\top}$
\end_inset

 is 
\emph on
any
\emph default
 rotation of the tangent 
\emph on
plane
\emph default
, that is to say any one having 
\begin_inset Formula $\mathbf{n}$
\end_inset

 as rotation axis.
\end_layout

\begin_layout Standard
This behaviour underlines the complexity of the space of 3D rotations, compared
 to their 2D counterpart, and allows for effects only achievable by anisotropic
 shaders, given their reliance on the state of the whole tangent space.
 Tangent and bitangent vectors can in fact be rotated in the tangent plane
 to describe non-trivial variations of the microsurface distribution orientation
 across the surface.
\end_layout

\begin_layout Standard
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Standard
This subsection focuses on how to describe an arbitrary tangent plane rotation
 
\begin_inset Formula $r^{\top}$
\end_inset

, how to implement it in the shader and how to compose it with other transformat
ions like tangent space perturbations discussed before.
\end_layout

\begin_layout Standard
To rotate the whole tangent plane, both the 
\begin_inset Formula $\mathbf{t}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b}$
\end_inset

 vectors should be rotated the same way.
 Since they should always be perpendicular, a quick simplification is to
 fix, for any arbitrary tangent vector 
\begin_inset Formula $\mathbf{t}$
\end_inset

, its corresponding
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Formula $\mathbf{b}$
\end_inset

 is effectively obtained from 
\begin_inset Formula $\mathbf{t}$
\end_inset

 by rotating it 
\begin_inset Formula $90\textdegree$
\end_inset

 around the normal 
\begin_inset Formula $\mathbf{n}$
\end_inset


\end_layout

\end_inset

 bitangent vector 
\begin_inset Formula $\mathbf{b}$
\end_inset

 as 
\begin_inset Formula $\mathbf{b}=J\mathbf{t}$
\end_inset

, where:
\begin_inset Formula 
\[
J=\left(\begin{array}{ccc}
0 & -1 & 0\\
1 & 0 & 0\\
0 & 0 & 1
\end{array}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
This convention allows us to only have to rotate 
\begin_inset Formula $\mathbf{t}$
\end_inset

 in the tangent plane and retrieve 
\series bold

\begin_inset Formula $\mathbf{b}$
\end_inset

 
\series default
immediately after.
\end_layout

\begin_layout Standard
Two paths can be followed to rotate 
\begin_inset Formula $\mathbf{t}$
\end_inset

: the first would be to store an angle 
\begin_inset Formula $\vartheta$
\end_inset

 in a 1-channel texture, representing the angle of rotation about the 
\begin_inset Formula $\mathbf{n}$
\end_inset

 axis.
 This however would require calculating goniometric functions and matrix
 multiplication in the fragment shader.
\end_layout

\begin_layout Standard
The second path is the one I implemented in this project: I store the two
 components
\begin_inset Foot
status open

\begin_layout Plain Layout
The two nontrivial components: a tangent vector always has its third component
 equal to 0
\end_layout

\end_inset

 of the rotated tangent vector (in tangent space coordinates), in a 2-channel
 texture.
 They are then passed to the 
\begin_inset Formula $\mathtt{fragment\,shader}$
\end_inset

 as they are to compute the modified 
\begin_inset Formula $\mathbf{t}$
\end_inset

 vector.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The generation of this texture, as implemented for this project, is performed
 in the 
\begin_inset Formula $\mathtt{generateTangentPlaneTexture.exe}$
\end_inset

 program.
 It revolves around two lines of code computing the vector's 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 components as functions of the texture's 
\begin_inset Formula $(u,v)$
\end_inset

 coordinates.
\end_layout

\begin_layout Plain Layout
Here is an example of the functions generating the TPR mapping used in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tangent-Space-Rotation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

float x = glm::cos(PI*v); // x(u,v)
\end_layout

\begin_layout Plain Layout

float y = glm::sin(PI*v); // y(u,v)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Plain Layout
This program actually generates a 4-channel RGBA texture, since it supports,
 on its third and fourth channels, the definition of a UV map for the directiona
l roughnesses 
\begin_inset Formula $\alpha_{x}$
\end_inset

 and 
\begin_inset Formula $\alpha_{y}$
\end_inset

 used by anisotropic shaders.
 However, as explained in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Environment-Mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the preprocessing required for achieving smooth real-time bumped environment
 mapping needs the roughness values to be fixed across the whole application.
 These components are thus ignored by the main application, but their values
 can be set across the texture by modifying these lines of code (their current
 state reflects the RGBA TPR map in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tangent-Space-Rotation"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language={C++}"
inline false
status open

\begin_layout Plain Layout

float m = 0.1; // principal roughness, i.e.
 alpha_x
\end_layout

\begin_layout Plain Layout

float n = 1.0; // orthogonal roughness, i.e.
 alpha_y
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
In direct-light anisotropic renderings, the full TPR/roughness mapping can
 be tailor-made to achieve a wider range of effects, albeit sacrificing
 the beauty of environment mapping
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $\linebreak{}$
\end_inset


\end_layout

\begin_layout Plain Layout
A different use for the same tool would be to help artists authoring complex
 UV-mapped models with anisotropic reflecting surfaces in the UV-mapping
 itself.
 It is often the case, in fact, that UV maps must be split along seams in
 the mesh, mapping parts of the mesh to different areas in the texture image,
 cramming and rotating them to make use of the most possible space.
 To maintain correct anisotropy, the orientation of these mapped regions
 would be constrained to a fixed direction, introducing issues when cramming
 them.
 Through the use of a parallel TPR texture, instead, the artist is allowed
 to rotate each mapped mesh component as needed, letting TPR manage the
 issue of anisotropy directions on the surface of the model.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The results of this process are shown in figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tangent-Space-Rotation"
plural "false"
caps "false"
noprefix "false"

\end_inset

, as well as the result of composing quaternion and TPR mapping on the same
 model.
 Composing the effects is actually really simple, since rotations (in this
 case in three dimensions) are linear transformations.
 This lets us apply bump mapping straight to the rotated 
\begin_inset Formula $\mathbf{t}$
\end_inset

 and 
\begin_inset Formula $\mathbf{b}$
\end_inset

 (
\begin_inset Formula $\mathbf{n}$
\end_inset

 is unaffected by TPR mapping) and achieve their composite effect.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tangent Space Rotation Mapping
\begin_inset CommandInset label
LatexCommand label
name "fig:Tangent-Space-Rotation"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/noDiffMap.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
without TPR mapping
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/withDiffMap.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
with TPR mapping
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Federico/Pictures/withBoth.png
	width 45text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
composed mapping
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
the TPR map
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Parallax Occlusion Mapping
\end_layout

\begin_layout Section
Environment Mapping
\begin_inset CommandInset label
LatexCommand label
name "sec:Environment-Mapping"

\end_inset


\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Subsection
Diffuse Component
\end_layout

\begin_layout Subsection
Specular Component
\end_layout

\begin_layout Subsubsection
Why Ashikhmin-Shirley?
\begin_inset CommandInset label
LatexCommand label
name "subsec:Why-Ashikhmin-Shirley?"

\end_inset


\end_layout

\begin_layout Subsubsection
Importance Sampling
\end_layout

\begin_layout Subsubsection
Pre-processing
\begin_inset CommandInset label
LatexCommand label
name "subsec:Pre-processing"

\end_inset


\end_layout

\begin_layout Subsubsection
Real-Time Monte-Carlo integration of environment luminance
\end_layout

\begin_layout Section
Implementation Details
\end_layout

\begin_layout Subsection
Languages and Libraries
\end_layout

\begin_layout Subsection
File System organization for Asset import
\end_layout

\begin_layout Subsection
Compiling and using the pre-processing applications
\end_layout

\begin_layout Section
Results and Performance
\end_layout

\begin_layout Subsection
Rendered Models
\end_layout

\begin_layout Subsection
Performance and Quality analysis
\end_layout

\begin_layout Subsection
Possible optimization improvements
\end_layout

\begin_layout Subsubsection
Capping the number of samples with minimal quality loss
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "LearnOpenGL"
key "key-1"
literal "false"

\end_inset

learnopengl.com
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "AsSh00"
key "key-2"
literal "false"

\end_inset

Michael Ashikhmin and Peter Shirley.
 An Anisotropic Phong Light Reflection Model.
 University of Utah, 2000
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "HeSe98"
key "key-3"
literal "false"

\end_inset

Wolfgang Heidrich and Hans-Peter Seidel.
 Efficient Rendering of Anisotropic Surfaces Using Computer Graphics Hardware.
 University of Erlangen, 1998
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Ward92"
key "key-4"
literal "false"

\end_inset

Gregory J.
 Ward.
 Measuring and modeling anisotropic reflection.
 Computer Graphics, 26(4):265–272, July 1992.
 ACM Siggraph ’92 Conference Proceedings.
\end_layout

\end_body
\end_document
